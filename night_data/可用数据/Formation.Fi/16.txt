------------------------------------------------
交易故障分析：
一、关键异常点  
1. USDT大额异常转移：故障交易中，Uniswap V2池转出200,000,000 USDT至中间合约0xd02c260f...，最终997,993,976.52 USDT流向攻击者地址0x651043...，远超过正常交易（如非故障交易的77.75 USDT）。  
2. 无限授权滥用：中间合约0xd02c260f...通过Approval事件获得USDT无限授权，非故障交易中授权额度为有限值。  
3. 代币异常铸造/销毁：合约0xcb6afd...（Formation USD）在故障交易中铸造并销毁99,997,695.6代币（18位精度），而非故障交易仅涉及质押/转账。  
4. 流动性池失衡：故障交易触发Uniswap V2池Sync事件，代币A余额异常膨胀至1e21，导致兑换比例被操纵。  

二、漏洞原因分析  
1. **授权逻辑缺陷**：中间合约0xd02c260f...通过无限授权获得USDT完全控制权，合约未验证调用者身份，允许任意地址触发资金转移。  
2. **代币合约漏洞**：Formation USD代币（0xcb6afd...）的铸造函数缺乏权限控制，攻击者通过调用0x00f714ce函数铸造巨额代币，用于操纵Uniswap流动性池。  
3. **价格操控攻击**：攻击者将虚假铸造的Formation USD注入Uniswap池，利用swap函数以虚高比例兑换USDT，最终通过Sync事件掩盖池内实际余额。  
4. **重入风险**：trace显示多次交叉调用（如0x6e553f65→0x7e1c0c09→0x6f1a366d），合约未采用重入锁，可能被嵌套调用抽走资金。  

三、攻击路径还原  
1. **准备阶段**：攻击者地址0x651043...调用中间合约0xd02c260f...，获取USDT无限授权。  
2. **代币操控**：通过Formation USD合约的漏洞函数铸造99,997,695.6代币，并质押到Uniswap V2池制造虚假流动性。  
3. **套利攻击**：调用Uniswap的swap函数，以Formation USD兑换池内200,000,000 USDT，利用虚高汇率完成超额兑换。  
4. **资金转移**：将盗取的USDT通过多层转账（0xd02c260f...→0xcb6afd...→攻击者地址）完成洗钱，最终997万USDT归属攻击者。  
5. **痕迹清除**：销毁虚假铸造的Formation USD代币，触发Sync事件更新池余额，掩盖攻击证据。  

四、trace调用链（故障交易）  
调用链：  
0x6510438a7e273e71300892c6faf946ab3b04cbcb  
→ 0xd02c260f54997146c9028b2ac7144b11ce4c20a6  
→ 0xdac17f958d2ee523a2206206994597c13d831ec7（USDT合约，授权操作）  
→ 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852（Uniswap V2池，swap）  
→ 0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723（Formation USD合约，铸造/销毁）  
→ 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2（WETH合约，余额查询）  
→ 0x6510438a7e273e71300892c6faf946ab3b04cbcb（资金最终接收方）
------------------------------------------------
向量库匹配结果：
{'ids': [['Formation.Fi-LPFarm.sol', 'Formation.Fi-Address.sol', 'Formation.Fi-Vault.sol', 'Formation.Fi-IERC20Metadata.sol', 'Formation.Fi-SafeERC20.sol', 'Formation.Fi-IERC20.sol', 'Formation.Fi-Math.sol', 'Formation.Fi-Context.sol', 'Formation.Fi-ERC20.sol', 'Formation.Fi-Ownable.sol', 'Formation.Fi-ReentrancyGuard.sol']], 'embeddings': None, 'documents': [['LPFarm 智能合约总结：该合约是基于 ERC20 代币的流动性挖矿农场系统，用户可通过质押 LP 代币获取 FORM 代币奖励。核心功能包含动态 APR 调整机制（通过乘数器 MULTIPLIER 与时间槽 trenches 实现）、质押手续费抽取（3% 费率）及权限管理体系。合约采用分层 APR 计算，通过 trenches 数组记录不同时间段的 APR 值变化，实现用户收益的精准分段计算。用户质押时自动累积历史收益，提现时同时结算 LP 本金和 FORM 收益，手续费会累积至 FEE_BALANCE 供特定地址提取。\n\n函数列表：\n构造函数：初始化代币接口、APR、乘数器及费用管理地址\ngetAPRValue：返回当前 APR 乘数计算结果\nsetMultiplier：仅所有者可调整乘数器并记录新时间槽\nsetFee：仅所有者可修改手续费率\nsendFeeTo：由 FEE_TO_SETTER 指定手续费接收地址\nsetFeeToSetter：更换权限设置地址\ngetFee：查询当前手续费池余额\ngetUsersYieldAmount：计算用户总待领取收益\nstake：执行 LP 代币质押并更新收益状态\nunstake：提取质押 LP 代币并结算收益，扣除手续费\nwithdrawYield：单独提取已产生收益\nwithdrawFee：手续费接收地址提取累积手续费\n_calculateYield：内部函数实现多时间段 APR 收益计算', 'Address 库智能合约总结：该合约为 Solidity 地址操作工具库，提供安全可靠的低级交互方法。核心功能包含地址类型验证、以太币安全转账、合约调用三大模块，通过封装底层操作有效防范常见安全隐患。关键实现包括：1. 使用 extcodesize 汇编指令检测合约地址；2. 用 call 方法替代 transfer 规避 gas 限制问题；3. 提供静态调用、委托调用等多样化调用方式；4. 统一错误处理机制自动解析 revert 数据。该库特别强调调用安全性，所有函数调用前均会验证目标地址的合约属性，并采用 checks-effects-interactions 模式防止重入攻击。函数列表：isContract：检测地址是否为合约地址。sendValue：安全转账 ETH 并处理失败情况。functionCall：执行普通合约调用。functionCall（重载）：带自定义错误信息的合约调用。functionCallWithValue：附带 ETH 转账的合约调用。functionCallWithValue（重载）：带金额和错误信息的转账调用。functionStaticCall：执行静态调用验证状态。functionStaticCall（重载）：带错误信息的静态调用。functionDelegateCall：执行委托调用。functionDelegateCall（重载）：带错误信息的委托调用。_verifyCallResult：内部函数统一验证调用结果。', '智能合约名称：Vault（跨链资产金库与流动性池管理合约）。该合约主要实现了一个具备跨链交换功能的ERC20代币金库系统，允许用户存入ERC20代币获取流动性池（LP）代币，同时支持跨链资产转移和手续费分配机制。核心功能包括：1. 存款/取款机制实现ERC20代币与LP代币的兑换；2. 跨链交换功能处理资金转移与费用分配（50%给LP提供者，50%归国库）；3. 紧急关闭机制保障资金安全；4. 手续费动态配置与国库管理功能。合约继承OpenZeppelin的ReentrancyGuard防重入攻击，并通过Ownable实现权限控制，关键操作仅限所有者或桥接地址调用。\n\n函数列表：\n- deposit：存入代币获取LP代币\n- withdraw：销毁LP代币取回代币\n- totalAssets：获取金库总资产\n- minAmountForSwap：查询最小交换金额\n- setEmergencyShutdown：设置紧急关闭状态（仅所有者）\n- setMinAmountForSwap：设置最小交换金额（仅所有者）\n- setTxFee：设置交易手续费（仅所有者）\n- transfer：ERC20代币转账\n- balanceOf：查询LP代币余额\n- tokenAllocationOf：查询实际代币持有量\n- allowance：查询授权额度\n- increaseAllowance：增加授权额度\n- decreaseAllowance：减少授权额度\n- approve：授权代币操作\n- transferFrom：授权转账\n- swapOut：执行跨链转出（仅桥接地址）\n- swapIn：发起跨链转入\n- refund：处理跨链退款（仅桥接地址）\n- withdrawTreasury：提取国库资金（仅所有者）', '智能合约名称：IERC20Metadata接口。该合约是ERC20代币标准的扩展接口，定义了代币的元数据相关功能，作为IERC20接口的补充。合约主要提供代币的名称、符号和小数位数查询功能，这些信息用于标识代币的基本属性并在钱包、交易所等场景中展示。该接口属于ERC20标准中的可选元数据扩展部分，需与主IERC20接口配合使用。合约中三个视图函数均不修改链上状态，仅提供只读访问，需在实现该接口的具体代币合约中重写这些函数并返回实际数据。\n\n函数列表如下：name()函数用于查询代币的名称，例如"Bitcoin"；symbol()函数用于查询代币的符号，例如"BTC"；decimals()函数用于查询代币的小数精度位数，通常返回18。', '智能合约名称：SafeERC20。该合约为一个提供安全ERC20代币操作方法的库，主要用于增强标准ERC20操作的安全性，处理可能失败的代币交易并支持无返回值代币。核心功能是通过封装代币转账、授权等操作，确保在调用失败时自动回滚交易。关键机制包括使用低层调用检查合约存在性，并对返回数据进行有效性验证。该库特别针对approve函数的前后授权冲突问题实现安全增量/减量授权方法，避免常见授权竞争条件风险。主要安全措施包含：1.转账类函数强制验证调用结果 2.禁止非零到非零的授权覆盖 3.减量授权时的余额不足检查 4.所有操作通过_callOptionalReturn进行底层调用验证。函数列表如下：safeTransfer - 执行安全的ERC20转账操作，从当前合约向指定地址转账；safeTransferFrom - 从指定地址向另一地址安全转账；safeApprove（已弃用） - 设置授权额度，要求必须从零地址开始授权或重置为零；safeIncreaseAllowance - 安全增加授权额度，避免授权竞争；safeDecreaseAllowance - 安全减少授权额度，防止超额减少；_callOptionalReturn - 内部函数处理底层调用并验证返回结果。', '智能合约名称：ERC20标准接口合约（IERC20）。该合约为ERC20代币标准的接口定义，规定了实现ERC20标准必须包含的核心函数和事件。合约定义了代币的基本操作逻辑，包括查询总供应量、获取账户余额、执行代币转账、设置第三方操作额度等功能。同时规定了转账与授权操作时必须触发的事件，为代币实现提供了标准化的交互模板。此接口不包含具体实现代码，仅作为其他ERC20代币合约的遵循规范。\n\n函数列表：totalSupply() - 查询代币总供应量；balanceOf() - 获取指定账户余额；transfer() - 向指定地址转账；allowance() - 查询授权额度；approve() - 设置第三方操作额度；transferFrom() - 通过授权机制执行转账。事件列表：Transfer - 转账发生时触发；Approval - 授权额度变更时触发。', '智能合约名称：Math 工具库。该合约为一个提供基础数学运算功能的工具库，包含四个数学计算函数，用于处理常见数值运算并预防算术溢出问题。合约代码以 library 形式实现，所有函数均为 pure 类型且不涉及状态变量操作，主要服务于其他合约的数值计算需求。核心功能包含：1. 提供最大/最小值计算，通过 max/min 函数实现简单数值比较；2. 安全平均值计算，通过分解运算步骤避免 (a+b) 可能导致的溢出问题；3. 天花板除法计算，采用 (a + b -1)/b 的变形公式实现向上取整的除法运算，并通过余数判断优化计算过程。代码特点体现在对算术运算安全性的处理，如在 average 函数中采用 (a/2 + b/2 + 余数处理) 的分步计算模式，以及在 ceilDiv 函数中通过判断余数是否存在来避免不必要的加法运算，显示出对 Gas 消耗的优化考量。\n\n函数列表：\n1. max(uint256 a, uint256 b)：返回两个输入参数中的较大值\n2. min(uint256 a, uint256 b)：返回两个输入参数中的较小值\n3. average(uint256 a, uint256 b)：返回两个参数的平均值，采用防溢出计算方式\n4. ceilDiv(uint256 a, uint256 b)：实现向上取整的除法运算，返回大于等于商的最小整数', '智能合约名称：Context（上下文信息抽象合约）。该合约是一个抽象合约，主要用于为其他合约提供执行上下文信息的获取能力。其核心功能是封装区块链交易的基础信息，解决元交易场景下直接获取msg.sender可能不准确的问题。合约通过两个视图函数分别返回交易发送者地址和原始调用数据，采用virtual关键字允许子合约重写逻辑，以此实现元交易中真实发送者与实际支付账户分离的场景适配。该合约设计为"中间件"性质，通常被作为库合约继承使用，适用于需要支持Meta-Transaction（如Gas费代付）的智能合约架构，通过抽象层隔离实现逻辑与调用上下文获取的耦合关系。\n\n函数列表：1. _msgSender()：内部视图函数，返回当前交易发起者的地址，默认直接读取msg.sender值。2. _msgData()：内部视图函数，返回完整的原始调用数据bytes calldata类型，默认直接返回msg.data数据。', '智能合约名称：ERC20。该合约是一个符合 ERC20 标准的代币基础实现，继承自 Context、IERC20 和 IERC20Metadata 接口。合约核心功能包括代币转账、余额查询、授权管理及供应量控制，采用 OpenZeppelin 的安全实践模式。关键特性包括：1. 通过 _balances 映射记录账户余额，_allowances 映射记录授权额度；2. 转账和授权操作均包含零地址校验与余额充足性检查；3. 提供 increaseAllowance 和 decreaseAllowance 函数解决授权竞态条件问题；4. 内部封装 _mint 和 _burn 函数实现代币铸造与销毁逻辑，需在派生合约中调用以控制供应量；5. 包含 _beforeTokenTransfer 和 _afterTokenTransfer 钩子函数供扩展定制化逻辑。该合约作为基础模板，需通过继承并实现代币发行机制方可直接使用。\n\n函数列表如下：name() 返回代币名称，symbol() 返回代币符号，decimals() 返回代币精度（固定18位），totalSupply() 返回总供应量，balanceOf() 查询指定地址余额，transfer() 执行代币转账，allowance() 查询授权额度，approve() 设置授权额度，transferFrom() 从授权地址转账，increaseAllowance() 增加授权额度，decreaseAllowance() 减少授权额度，_transfer() 内部执行转账逻辑，_mint() 内部铸造代币，_burn() 内部销毁代币，_approve() 内部处理授权设置，_beforeTokenTransfer() 转账前钩子函数，_afterTokenTransfer() 转账后钩子函数。', '智能合约名称：Ownable（可拥有权限管理合约）。该合约是一个基础的所有权管理模块，提供权限控制机制，允许特定功能仅由合约所有者调用。合约核心功能包括设置初始所有者、转移所有权、放弃所有权以及通过修饰符限制函数访问权限。合约部署时自动将部署者设为初始所有者，所有者可通过transferOwnership将权限转移至新地址，或通过renounceOwnership放弃所有权使其成为零地址。关键代码包括使用onlyOwner修饰符对权限函数进行访问限制，通过内部函数_setOwner实现所有权变更并触发OwnershipTransferred事件，同时对转入的新地址进行非零有效性校验以防止无效转移。\n\n函数列表：\n1. 构造函数constructor()：初始化合约，将部署者设置为初始所有者。\n2. function owner()：公共视图函数，返回当前所有者地址。\n3. modifier onlyOwner()：修饰符，限制只有所有者可调用被修饰函数。\n4. function renounceOwnership()：公共函数，放弃所有权使合约进入无主状态，仅所有者可调用。\n5. function transferOwnership(address newOwner)：公共函数，将所有权转移至指定新地址，需校验非零地址，仅所有者可调用。\n6. function _setOwner(address newOwner)：私有函数，实际执行所有权变更操作并触发事件。', '智能合约名称：ReentrancyGuard（防重入保护合约）。该合约是一个抽象合约，核心功能是通过状态锁机制防止重入攻击。合约采用状态变量_status跟踪函数调用状态，定义_NOT_ENTERED（未进入）和_ENTERED（已进入）两个常量作为状态标识。核心逻辑通过nonReentrant修饰器实现：在执行被修饰函数前检查当前状态，若处于_ENTERED状态则直接回退交易，防止嵌套调用；函数执行期间锁定状态为_ENTERED，执行完毕后再恢复为_NOT_ENTERED。合约构造函数初始化时默认将_status设置为未进入状态。该方案通过原子化状态切换确保同一时刻只有一个函数能执行关键逻辑，有效阻断重入漏洞，但需注意被修饰函数不能相互调用，建议通过private/internal函数拆分解决限制。\n\n函数列表包含：1. 构造函数constructor()：初始化合约时将_status设置为未进入状态。2. nonReentrant修饰器（虽非法定函数但属于可调用单元）：实施状态检查、状态锁定及状态复位逻辑，用于修饰需要防重入的外部函数。']], 'uris': None, 'data': None, 'metadatas': [[{'address': '0xc356ef8082ea212f4db7e57f5aa845b69688cbba'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}, {'address': '0xc356ef8082ea212f4db7e57f5aa845b69688cbba'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}, {'address': '0xc356ef8082ea212f4db7e57f5aa845b69688cbba'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}, {'address': '0xc356ef8082ea212f4db7e57f5aa845b69688cbba'}, {'address': '0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723'}]], 'distances': [[0.3408714532852173, 0.3485233783721924, 0.3822343349456787, 0.4102948307991028, 0.42722731828689575, 0.4381978511810303, 0.4840116500854492, 0.4939839839935303, 0.49773675203323364, 0.5610300302505493, 0.5741896629333496]], 'included': [<IncludeEnum.distances: 'distances'>, <IncludeEnum.documents: 'documents'>, <IncludeEnum.metadatas: 'metadatas'>]}
------------------------------------------------
重排序结果：
['Formation.Fi-Address.sol', 'Formation.Fi-Vault.sol', 'Formation.Fi-SafeERC20.sol', 'Formation.Fi-ERC20.sol', 'Formation.Fi-Ownable.sol', 'Formation.Fi-ReentrancyGuard.sol', 'Formation.Fi-IERC20.sol', 'Formation.Fi-IERC20Metadata.sol', 'Formation.Fi-LPFarm.sol', 'Formation.Fi-Math.sol', 'Formation.Fi-Context.sol']
------------------------------------------------
函数切片：

------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-isContract-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'isContract', 'visibility': 'internal', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '26#36'}"}
函数切片:
    function isContract(address account) internal view returns (bool) {
        // This method relies on extcodesize, which returns 0 for contracts in
        // construction, since the code is only stored at the end of the
        // constructor execution.

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-sendValue-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'sendValue', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'recipient', 'type': 'address payable'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['Address: insufficient balance', 'Address: unable to send value, recipient may have reverted'], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '54#59'}"}
函数切片:
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionCall-2
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionCall', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '79#81'}"}
函数切片:
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionCall-3
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionCall', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}, {'name': 'errorMessage', 'type': 'string'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '89#95'}"}
函数切片:
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionCallWithValue-4
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionCallWithValue', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}, {'name': 'value', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '108#114'}"}
函数切片:
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionCallWithValue-5
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionCallWithValue', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}, {'name': 'value', 'type': 'uint256'}, {'name': 'errorMessage', 'type': 'string'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['Address: insufficient balance for call', 'Address: call to non-contract'], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '122#133'}"}
函数切片:
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionStaticCall-6
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionStaticCall', 'visibility': 'internal', 'stateMutability': 'view', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '141#143'}"}
函数切片:
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionStaticCall-7
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionStaticCall', 'visibility': 'internal', 'stateMutability': 'view', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}, {'name': 'errorMessage', 'type': 'string'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['Address: static call to non-contract'], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '151#160'}"}
函数切片:
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionDelegateCall-8
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionDelegateCall', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '168#170'}"}
函数切片:
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-functionDelegateCall-9
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': 'functionDelegateCall', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'target', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}, {'name': 'errorMessage', 'type': 'string'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['Address: delegate call to non-contract'], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '178#187'}"}
函数切片:
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Address.sol-_verifyCallResult-10
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Address.sol', 'is_fault': False, 'message': "{'name': '_verifyCallResult', 'visibility': 'private', 'stateMutability': 'pure', 'parameters': [{'name': 'success', 'type': 'bool'}, {'name': 'returndata', 'type': 'bytes'}, {'name': 'errorMessage', 'type': 'string'}], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Address.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '189#209'}"}
函数切片:
    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            // Look for revert reason and bubble it up if present
            if (returndata.length > 0) {
                // The easiest way to bubble the revert reason is using memory via assembly

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-onlyBridge-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'onlyBridge', 'type': 'modifier', 'contract': 'Formation.Fi-Vault.sol', 'src': '47#50'}"}
函数切片:
	modifier onlyBridge() {
		require(msg.sender == bridge);
		_;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-notLocked-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'notLocked', 'type': 'modifier', 'contract': 'Formation.Fi-Vault.sol', 'src': '52#55'}"}
函数切片:
	modifier notLocked() {
		require(!emergencyShutdown, "Vault is locked out");
		_;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-constructor-2
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_name', 'type': 'string'}, {'name': '_symbol', 'type': 'string'}, {'name': '_token', 'type': 'address'}, {'name': '_bridge', 'type': 'address'}, {'name': '_minAmount', 'type': 'uint256'}, {'name': '_txFee', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['name', 'symbol', 'decimals', 'token', 'bridge', '_minAmountForSwap', 'txFee'], 'written': []}, 'src': '57#73'}"}
函数切片:
	constructor(
		string memory _name,
		string memory _symbol,
		address _token,
		address _bridge,
		uint256 _minAmount,
		uint256 _txFee
	) {
		require(_bridge != address(0));
		name = _name;
		symbol = _symbol;
		decimals = 18;
		token = ERC20(_token);
		bridge = _bridge;
		_minAmountForSwap = _minAmount;
		txFee = _txFee;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-deposit-3
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'deposit', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_amount', 'type': 'uint256'}, {'name': '_recipient', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['Balance or allowance not sufficient'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['token', 'token', 'token', 'token'], 'written': []}, 'src': '78#103'}"}
函数切片:
	function deposit(uint256 _amount, address _recipient) public nonReentrant notLocked returns (uint256) {
		require(_recipient != address(0));
		require(_recipient != address(this));

		uint256 amount = _amount;

		// If _amount not specified, transfer the full token balance,
		// up to deposit limit
		if (amount == type(uint256).max) amount = token.balanceOf(msg.sender);

		// sanity check
		require(amount <= token.balanceOf(msg.sender) && amount <= token.allowance(msg.sender, address(this)), "Balance or allowance not sufficient");

		// Ensure we are depositing something
		require(amount > 0);

		// Issue new shares (needs to be done before taking deposit to be accurate)
		// Shares are issued to recipient (may be different from msg.sender)
		// See @dev note, above.
		uint256 shares = _issueSharesForAmount(_recipient, amount);

		// Tokens are transferred from msg.sender (may be different from _recipient)
		token.safeTransferFrom(msg.sender, address(this), amount);

		return shares; // Just in case someone wants them
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-withdraw-4
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'withdraw', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_amount', 'type': 'uint256'}, {'name': '_recipient', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['Amount exceeds balance', 'Nothing to withdraw'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_balances', '_balances', 'totalTokens', 'totalSupply', 'totalSupply', '_balances', 'totalTokens', 'token', 'decimals', 'token'], 'written': []}, 'src': '108#129'}"}
函数切片:
	function withdraw(uint256 _amount, address _recipient) external nonReentrant notLocked returns (uint256) {
		// If _shares not specified, transfer full share balance
		uint256 shares = _amount;
		if (_amount == type(uint256).max) {
			shares = _balances[msg.sender];
		}

		// Limit to only the shares they own
		require(shares <= _balances[msg.sender], "Amount exceeds balance");

		// Ensure we are withdrawing something
		require(shares > 0, "Nothing to withdraw");

		uint256 tokensToTransfer = (shares * totalTokens) / totalSupply;
		totalSupply -= shares;
		_balances[msg.sender] -= shares;
		totalTokens -= tokensToTransfer;
		emit Transfer(msg.sender, address(0), shares);
		token.safeTransfer(_recipient, (tokensToTransfer * 10**token.decimals()) / (10**decimals));

		return shares;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-_issueSharesForAmount-5
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': '_issueSharesForAmount', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['decimals', 'token', 'totalSupply', 'totalSupply', 'totalTokens', 'totalSupply', 'totalTokens', '_balances'], 'written': []}, 'src': '131#153'}"}
函数切片:
	function _issueSharesForAmount(address to, uint256 amount) internal returns (uint256) {
		// Issues `amount` Vault shares to `to`.
		// Shares must be issued prior to taking on new collateral, or
		// calculation will be wrong. This means that only *trusted* tokens
		// (with no capability for exploitative behavior) can be used.
		uint256 _amount = 0;

		_amount = (amount * (10**decimals)) / 10**token.decimals();
		require(_amount != 0); // dev: division rounding resulted in zero

		uint256 newSupply = _amount; // maybe small amount than amount
		if (totalSupply > 0) {
			newSupply = (newSupply * totalSupply) / totalTokens;
		}

		// Mint new shares
		totalSupply += newSupply;
		totalTokens += _amount;
		_balances[to] += newSupply;
		emit Transfer(address(0), to, newSupply);

		return newSupply;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-_totalAssets-6
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': '_totalAssets', 'visibility': 'internal', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['token'], 'written': []}, 'src': '155#158'}"}
函数切片:
	function _totalAssets() internal view returns (uint256) {
		// See note on `totalAssets()`.
		return token.balanceOf(address(this));
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-totalAssets-7
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'totalAssets', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '164#166'}"}
函数切片:
	function totalAssets() external view returns (uint256) {
		return _totalAssets();
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-minAmountForSwap-8
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'minAmountForSwap', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_minAmountForSwap'], 'written': []}, 'src': '170#172'}"}
函数切片:
	function minAmountForSwap() external view returns (uint256) {
		return _minAmountForSwap;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-setEmergencyShutdown-9
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'setEmergencyShutdown', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'down', 'type': 'bool'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['EmergencyShutdown'], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['emergencyShutdown'], 'written': []}, 'src': '176#179'}"}
函数切片:
	function setEmergencyShutdown(bool down) external onlyOwner {
		emergencyShutdown = down;
		emit EmergencyShutdown(down);
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-setMinAmountForSwap-10
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'setMinAmountForSwap', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'minAmount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_minAmountForSwap'], 'written': []}, 'src': '183#185'}"}
函数切片:
	function setMinAmountForSwap(uint256 minAmount) external onlyOwner {
		_minAmountForSwap = minAmount;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-setTxFee-11
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'setTxFee', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_txFee', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['txFee'], 'written': []}, 'src': '189#191'}"}
函数切片:
	function setTxFee(uint256 _txFee) external onlyOwner {
		txFee = _txFee;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-transfer-12
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'transfer', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '193#196'}"}
函数切片:
	function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
		_transfer(_msgSender(), recipient, amount);
		return true;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-balanceOf-13
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'balanceOf', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_balances'], 'written': []}, 'src': '198#200'}"}
函数切片:
	function balanceOf(address account) public view virtual override returns (uint256) {
		return _balances[account];
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-tokenAllocationOf-14
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'tokenAllocationOf', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_balances', 'totalTokens', 'token', 'decimals', 'totalSupply'], 'written': []}, 'src': '202#204'}"}
函数切片:
	function tokenAllocationOf(address account) public view returns (uint256) {
		return ((_balances[account] * totalTokens) * (10**token.decimals())) / 10**decimals / totalSupply;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-_transfer-15
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': '_transfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'sender', 'type': 'address'}, {'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['ERC20: transfer from the zero address', 'ERC20: transfer to the zero address', 'ERC20: transfer amount exceeds balance'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_balances', '_balances', '_balances'], 'written': []}, 'src': '206#222'}"}
函数切片:
	function _transfer(
		address sender,
		address recipient,
		uint256 amount
	) internal virtual {
		require(sender != address(0), "ERC20: transfer from the zero address");
		require(recipient != address(0), "ERC20: transfer to the zero address");

		uint256 senderBalance = _balances[sender];
		require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
		unchecked {
			_balances[sender] = senderBalance - amount;
		}
		_balances[recipient] += amount;

		emit Transfer(sender, recipient, amount);
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-allowance-16
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'allowance', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '224#226'}"}
函数切片:
	function allowance(address owner, address spender) public view virtual override returns (uint256) {
		return _allowances[owner][spender];
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-increaseAllowance-17
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'increaseAllowance', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'addedValue', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '228#231'}"}
函数切片:
	function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
		_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
		return true;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-decreaseAllowance-18
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'decreaseAllowance', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'subtractedValue', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['ERC20: decreased allowance below zero'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '233#240'}"}
函数切片:
	function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
		uint256 currentAllowance = _allowances[_msgSender()][spender];
		require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
		unchecked {
			_approve(_msgSender(), spender, currentAllowance - subtractedValue);
		}
		return true;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-approve-19
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'approve', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '242#245'}"}
函数切片:
	function approve(address spender, uint256 amount) public virtual override returns (bool) {
		_approve(_msgSender(), spender, amount);
		return true;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-transferFrom-20
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'transferFrom', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'sender', 'type': 'address'}, {'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['ERC20: transfer amount exceeds allowance'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '247#259'}"}
函数切片:
	function transferFrom(
		address sender,
		address recipient,
		uint256 amount
	) public virtual override returns (bool) {
		_transfer(sender, recipient, amount);
		uint256 currentAllowance = _allowances[sender][_msgSender()];
		require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
		unchecked {
			_approve(sender, _msgSender(), currentAllowance - amount);
		}
		return true;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-_approve-21
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': '_approve', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['ERC20: approve from the zero address', 'ERC20: approve to the zero address'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '261#271'}"}
函数切片:
	function _approve(
		address owner,
		address spender,
		uint256 amount
	) internal virtual {
		require(owner != address(0), "ERC20: approve from the zero address");
		require(spender != address(0), "ERC20: approve to the zero address");

		_allowances[owner][spender] = amount;
		emit Approval(owner, spender, amount);
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-swapOut-22
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'swapOut', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'account', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': ['SwapOutProcessed'], 'errors': ['Transfer amount exceeds vault balance'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['token', 'token'], 'written': []}, 'src': '276#281'}"}
函数切片:
	function swapOut(address account, uint256 amount) external onlyBridge notLocked returns (bool) {
		require(amount <= token.balanceOf(address(this)), "Transfer amount exceeds vault balance");
		token.safeTransfer(account, amount);
		emit SwapOutProcessed(account, amount);
		return true;
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-swapIn-23
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': True, 'message': "{'name': 'swapIn', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'account', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}, {'name': 'fee', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['SwapInProcessed'], 'errors': ['Should be bigger than minimum amount', 'Fee should be greater than tx fee'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['_minAmountForSwap', 'txFee', 'token', 'txFee', 'lpFee', 'BASIS_POINT', 'totalTokens', 'decimals', 'token', 'treasuryAmount'], 'written': []}, 'src': '287#301'}"}
函数切片:
	function swapIn(
		address account,
		uint256 amount,
		uint256 fee
	) external notLocked {
		require(amount >= _minAmountForSwap, "Should be bigger than minimum amount");
		require(fee >= txFee, "Fee should be greater than tx fee");
		token.safeTransferFrom(msg.sender, address(this), amount);
		uint256 redistribution = ((fee - txFee) * lpFee) / BASIS_POINT;

		totalTokens += (redistribution * (10**decimals)) / 10**token.decimals();
		treasuryAmount += fee - redistribution;

		emit SwapInProcessed(account, amount, fee);
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-refund-24
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'refund', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'account', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}, {'name': 'fee', 'type': 'uint256'}, {'name': 'gasFee', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['RefundProcessed'], 'errors': [], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['token', 'txFee', 'lpFee', 'BASIS_POINT', 'totalTokens', 'decimals', 'token', 'treasuryAmount', 'treasuryAmount'], 'written': []}, 'src': '308#323'}"}
函数切片:
	function refund(
		address account,
		uint256 amount,
		uint256 fee,
		uint256 gasFee
	) external onlyBridge notLocked {
		token.safeTransfer(account, amount);
		uint256 redistribution = ((fee - txFee) * lpFee) / BASIS_POINT;

		totalTokens -= (redistribution * (10**decimals)) / 10**token.decimals();
		treasuryAmount -= fee - redistribution;

		treasuryAmount += gasFee;

		emit RefundProcessed(account, amount, fee);
	}
------------------------------------------------
函数切片ID: Formation.Fi-Vault.sol-withdrawTreasury-25
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Vault.sol', 'is_fault': False, 'message': "{'name': 'withdrawTreasury', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['Nothing to withdraw'], 'contract': 'Formation.Fi-Vault.sol', 'external_calls': [], 'state_vars': {'read': ['treasuryAmount', 'treasuryAmount', 'treasuryAmount', 'token'], 'written': []}, 'src': '325#330'}"}
函数切片:
	function withdrawTreasury() external onlyOwner {
		require(treasuryAmount > 0, "Nothing to withdraw");
		uint256 amount = treasuryAmount;
		treasuryAmount = 0;
		token.safeTransfer(msg.sender, amount);
	}
------------------------------------------------
函数切片ID: Formation.Fi-SafeERC20.sol-safeTransfer-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeTransfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '20#26'}"}
函数切片:
    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }
------------------------------------------------
函数切片ID: Formation.Fi-SafeERC20.sol-safeTransferFrom-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeTransferFrom', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'from', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '28#35'}"}
函数切片:
    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }
------------------------------------------------
函数切片ID: Formation.Fi-SafeERC20.sol-safeApprove-2
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeApprove', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SafeERC20: approve from non-zero to non-zero allowance'], 'contract': 'Formation.Fi-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '44#57'}"}
函数切片:
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
------------------------------------------------
函数切片ID: Formation.Fi-SafeERC20.sol-safeIncreaseAllowance-3
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeIncreaseAllowance', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '59#66'}"}
函数切片:
    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
------------------------------------------------
函数切片ID: Formation.Fi-SafeERC20.sol-safeDecreaseAllowance-4
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeDecreaseAllowance', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SafeERC20: decreased allowance below zero'], 'contract': 'Formation.Fi-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '68#79'}"}
函数切片:
    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }
------------------------------------------------
函数切片ID: Formation.Fi-SafeERC20.sol-_callOptionalReturn-5
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-SafeERC20.sol', 'is_fault': False, 'message': "{'name': '_callOptionalReturn', 'visibility': 'private', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'data', 'type': 'bytes'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SafeERC20: ERC20 operation did not succeed'], 'contract': 'Formation.Fi-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '87#97'}"}
函数切片:
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            // Return data is optional
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-constructor-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'name_', 'type': 'string'}, {'name': 'symbol_', 'type': 'string'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_name', '_symbol'], 'written': []}, 'src': '52#55'}"}
函数切片:
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-name-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'name', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'string'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_name'], 'written': []}, 'src': '60#62'}"}
函数切片:
    function name() public view virtual override returns (string memory) {
        return _name;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-symbol-2
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'symbol', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'string'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_symbol'], 'written': []}, 'src': '68#70'}"}
函数切片:
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-decimals-3
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'decimals', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint8'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '85#87'}"}
函数切片:
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-totalSupply-4
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'totalSupply', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_totalSupply'], 'written': []}, 'src': '92#94'}"}
函数切片:
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-balanceOf-5
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'balanceOf', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_balances'], 'written': []}, 'src': '99#101'}"}
函数切片:
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-transfer-6
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'transfer', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '111#114'}"}
函数切片:
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-allowance-7
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'allowance', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '119#121'}"}
函数切片:
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-approve-8
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'approve', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '130#133'}"}
函数切片:
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-transferFrom-9
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'transferFrom', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'sender', 'type': 'address'}, {'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['ERC20: transfer amount exceeds allowance'], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '148#162'}"}
函数切片:
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-increaseAllowance-10
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'increaseAllowance', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'addedValue', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '176#179'}"}
函数切片:
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-decreaseAllowance-11
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': 'decreaseAllowance', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'subtractedValue', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['ERC20: decreased allowance below zero'], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '195#203'}"}
函数切片:
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-_transfer-12
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': '_transfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'sender', 'type': 'address'}, {'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['ERC20: transfer from the zero address', 'ERC20: transfer to the zero address', 'ERC20: transfer amount exceeds balance'], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_balances', '_balances', '_balances'], 'written': []}, 'src': '219#239'}"}
函数切片:
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-_mint-13
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': '_mint', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'account', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['ERC20: mint to the zero address'], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_totalSupply', '_balances'], 'written': []}, 'src': '250#260'}"}
函数切片:
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-_burn-14
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': '_burn', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'account', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['ERC20: burn from the zero address', 'ERC20: burn amount exceeds balance'], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_balances', '_balances', '_totalSupply'], 'written': []}, 'src': '273#288'}"}
函数切片:
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-_approve-15
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': '_approve', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unknown'], 'errors': ['ERC20: approve from the zero address', 'ERC20: approve to the zero address'], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': ['_allowances'], 'written': []}, 'src': '303#313'}"}
函数切片:
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-_beforeTokenTransfer-16
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': '_beforeTokenTransfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'from', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '329#333'}"}
函数切片:
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
------------------------------------------------
函数切片ID: Formation.Fi-ERC20.sol-_afterTokenTransfer-17
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ERC20.sol', 'is_fault': False, 'message': "{'name': '_afterTokenTransfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'from', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '349#353'}"}
函数切片:
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
------------------------------------------------
函数切片ID: Formation.Fi-Ownable.sol-constructor-0
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Ownable.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Ownable.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '27#29'}"}
函数切片:
    constructor() {
        _setOwner(_msgSender());
    }
------------------------------------------------
函数切片ID: Formation.Fi-Ownable.sol-owner-1
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Ownable.sol', 'is_fault': False, 'message': "{'name': 'owner', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Ownable.sol', 'external_calls': [], 'state_vars': {'read': ['_owner'], 'written': []}, 'src': '34#36'}"}
函数切片:
    function owner() public view virtual returns (address) {
        return _owner;
    }
------------------------------------------------
函数切片ID: Formation.Fi-Ownable.sol-onlyOwner-2
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Ownable.sol', 'is_fault': False, 'message': "{'name': 'onlyOwner', 'type': 'modifier', 'contract': 'Formation.Fi-Ownable.sol', 'src': '41#44'}"}
函数切片:
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
------------------------------------------------
函数切片ID: Formation.Fi-Ownable.sol-renounceOwnership-3
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Ownable.sol', 'is_fault': False, 'message': "{'name': 'renounceOwnership', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': True, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Ownable.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '53#55'}"}
函数切片:
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }
------------------------------------------------
函数切片ID: Formation.Fi-Ownable.sol-transferOwnership-4
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Ownable.sol', 'is_fault': False, 'message': "{'name': 'transferOwnership', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'newOwner', 'type': 'address'}], 'returns': [], 'permission_check': True, 'reentrancy_guard': False, 'events': [], 'errors': ['Ownable: new owner is the zero address'], 'contract': 'Formation.Fi-Ownable.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '61#64'}"}
函数切片:
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Ownable.sol-_setOwner-5
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Ownable.sol', 'is_fault': False, 'message': "{'name': '_setOwner', 'visibility': 'private', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'newOwner', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['OwnershipTransferred'], 'errors': [], 'contract': 'Formation.Fi-Ownable.sol', 'external_calls': [], 'state_vars': {'read': ['_owner', '_owner'], 'written': []}, 'src': '66#70'}"}
函数切片:
    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
------------------------------------------------
函数切片ID: Formation.Fi-ReentrancyGuard.sol-constructor-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ReentrancyGuard.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-ReentrancyGuard.sol', 'external_calls': [], 'state_vars': {'read': ['_status', '_NOT_ENTERED'], 'written': []}, 'src': '38#40'}"}
函数切片:
    constructor() {
        _status = _NOT_ENTERED;
    }
------------------------------------------------
函数切片ID: Formation.Fi-ReentrancyGuard.sol-nonReentrant-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-ReentrancyGuard.sol', 'is_fault': False, 'message': "{'name': 'nonReentrant', 'type': 'modifier', 'contract': 'Formation.Fi-ReentrancyGuard.sol', 'src': '49#61'}"}
函数切片:
    modifier nonReentrant() {
        // On the first call to nonReentrant, _notEntered will be true
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        // Any calls to nonReentrant after this point will fail
        _status = _ENTERED;

        _;

        // By storing the original value once again, a refund is triggered (see
        // https://eips.ethereum.org/EIPS/eip-2200)
        _status = _NOT_ENTERED;
    }
------------------------------------------------
函数切片ID: Formation.Fi-IERC20.sol-totalSupply-0
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-IERC20.sol', 'is_fault': False, 'message': "{'name': 'totalSupply', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '12#12'}"}
函数切片:
    function totalSupply() external view returns (uint256);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20.sol-balanceOf-1
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-IERC20.sol', 'is_fault': False, 'message': "{'name': 'balanceOf', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '17#17'}"}
函数切片:
    function balanceOf(address account) external view returns (uint256);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20.sol-transfer-2
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-IERC20.sol', 'is_fault': False, 'message': "{'name': 'transfer', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '26#26'}"}
函数切片:
    function transfer(address recipient, uint256 amount) external returns (bool);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20.sol-allowance-3
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-IERC20.sol', 'is_fault': False, 'message': "{'name': 'allowance', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '35#35'}"}
函数切片:
    function allowance(address owner, address spender) external view returns (uint256);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20.sol-approve-4
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-IERC20.sol', 'is_fault': False, 'message': "{'name': 'approve', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '51#51'}"}
函数切片:
    function approve(address spender, uint256 amount) external returns (bool);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20.sol-transferFrom-5
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-IERC20.sol', 'is_fault': False, 'message': "{'name': 'transferFrom', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'sender', 'type': 'address'}, {'name': 'recipient', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '62#66'}"}
函数切片:
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20Metadata.sol-name-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-IERC20Metadata.sol', 'is_fault': False, 'message': "{'name': 'name', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'string'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20Metadata.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '16#16'}"}
函数切片:
    function name() external view returns (string memory);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20Metadata.sol-symbol-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-IERC20Metadata.sol', 'is_fault': False, 'message': "{'name': 'symbol', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'string'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20Metadata.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '21#21'}"}
函数切片:
    function symbol() external view returns (string memory);
------------------------------------------------
函数切片ID: Formation.Fi-IERC20Metadata.sol-decimals-2
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-IERC20Metadata.sol', 'is_fault': False, 'message': "{'name': 'decimals', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint8'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-IERC20Metadata.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '26#26'}"}
函数切片:
    function decimals() external view returns (uint8);
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-constructor-0
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_formToken', 'type': 'contract IERC20'}, {'name': '_lpToken', 'type': 'contract IERC20'}, {'name': 'initialAPR', 'type': 'uint256'}, {'name': 'initialMultiplier', 'type': 'uint256'}, {'name': '_feeToSetter', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['formToken', 'lpToken', 'BASE_APR', 'MULTIPLIER', 'FEE_TO_SETTER', 'FEE_TO', 'BASE_APR', 'MULTIPLIER', 'trenches'], 'written': []}, 'src': '39#53'}"}
函数切片:
    constructor(
        IERC20 _formToken,
        IERC20 _lpToken,
        uint256 initialAPR,
        uint256 initialMultiplier,
        address _feeToSetter
        ) {
        formToken = _formToken;
        lpToken = _lpToken;
        BASE_APR = initialAPR;
        MULTIPLIER = initialMultiplier;
        FEE_TO_SETTER = _feeToSetter;
        FEE_TO = _feeToSetter;
        trenches.push([block.timestamp, BASE_APR*MULTIPLIER]);
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-getAPRValue-1
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'getAPRValue', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['BASE_APR', 'MULTIPLIER'], 'written': []}, 'src': '56#58'}"}
函数切片:
    function getAPRValue() external view returns(uint256) {
        return BASE_APR*MULTIPLIER;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-setMultiplier-2
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'setMultiplier', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'newMultiplier', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['MULTIPLIER', 'BASE_APR', 'MULTIPLIER', 'trenches'], 'written': []}, 'src': '59#62'}"}
函数切片:
    function setMultiplier(uint256 newMultiplier) onlyOwner external {
        MULTIPLIER = newMultiplier;
        trenches.push([block.timestamp, BASE_APR*MULTIPLIER]);
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-setFee-3
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'setFee', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'newFee', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['FEE'], 'written': []}, 'src': '63#65'}"}
函数切片:
    function setFee(uint256 newFee) onlyOwner external {
        FEE = newFee;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-sendFeeTo-4
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'sendFeeTo', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'feeTo', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['FORBIDDEN'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['FEE_TO_SETTER', 'FEE_TO'], 'written': []}, 'src': '66#69'}"}
函数切片:
    function sendFeeTo(address feeTo) external {
        require(msg.sender == FEE_TO_SETTER, 'FORBIDDEN');
        FEE_TO = feeTo;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-setFeeToSetter-5
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'setFeeToSetter', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'newSetter', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['FORBIDDEN'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['FEE_TO_SETTER', 'FEE_TO_SETTER'], 'written': []}, 'src': '70#73'}"}
函数切片:
    function setFeeToSetter(address newSetter) external {
        require(msg.sender == FEE_TO_SETTER, 'FORBIDDEN');
        FEE_TO_SETTER = newSetter;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-getFee-6
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'getFee', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['FEE_BALANCE'], 'written': []}, 'src': '74#76'}"}
函数切片:
    function getFee() external view returns(uint256) {
        return FEE_BALANCE;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-_calculateYield-7
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': '_calculateYield', 'visibility': 'private', 'stateMutability': 'view', 'parameters': [{'name': 'user', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['trenches', 'startTime', 'trenches', 'trenches', 'startTime', 'trenches', 'trenches', 'startTime', 'trenches', 'trenches', 'startTime', 'trenches', 'ONE_ETH', 'ONE_YEAR', 'stakingBalance', 'ONE_ETH', 'trenches', 'trenchIndex'], 'written': []}, 'src': '79#125'}"}
函数切片:
    function _calculateYield(address user) private view returns(uint256) {
        // end means now
        uint256 end = block.timestamp;
        uint256 totalYield;
        // loop through trenches
        for(uint256 i = trenchIndex[user]; i < trenches.length; i++){
            // how long the user was staking during the trench
            uint256 stakingTimeWithinTier;
            // if comparing to the last trench then
            // check how long user was staking during that trench
            if (i + 1 == trenches.length) {
                if (startTime[user] > trenches[i][0]) {
                    stakingTimeWithinTier = end - startTime[user];
                } else {
                    stakingTimeWithinTier = end - trenches[i][0];
                    // if no at all, then work is done
                    if (stakingTimeWithinTier < 0) {
                        continue;
                    }
                }
            } else {
                // check if user was staking during that trench
                // if no skip to another trench
                if (startTime[user] >= trenches[i + 1][0]) {
                    continue;
                } else {
                    // check if user was staking during the entire trench or partially
                    uint256 stakingTimeRelative = trenches[i + 1][0] - startTime[user];
                    uint256 tierTime = trenches[i + 1][0] - trenches[i][0];
                    // that means entire timespan (even more)
                    if (stakingTimeRelative >= tierTime) {
                        stakingTimeWithinTier = tierTime;
                    } else {
                        // that means partially
                        stakingTimeWithinTier = stakingTimeRelative;
                    }
                }
            }
            // calculate yield earned during the trench
            uint256 yieldEarnedWithinTier = (((trenches[i][1] * ONE_ETH) / ONE_YEAR) * stakingTimeWithinTier) / 100;
            uint256 netYield = stakingBalance[user] * yieldEarnedWithinTier;
            uint256 netYieldFormatted = netYield / ONE_ETH;
            // add to total yield (from all trenches eventually)
            totalYield += netYieldFormatted;
        }
        return totalYield;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-getUsersYieldAmount-8
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'getUsersYieldAmount', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'user', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['You do not stake any tokens'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['stakingBalance', 'yieldBalance'], 'written': []}, 'src': '127#135'}"}
函数切片:
    function getUsersYieldAmount(address user) public view returns(uint256) {
        require(
            stakingBalance[user] > 0,
            "You do not stake any tokens");
        uint256 yieldEarned = _calculateYield(user);
        uint256 yieldUpToDate = yieldBalance[msg.sender];
        uint256 yieldTotal = yieldEarned + yieldUpToDate;
        return yieldTotal;
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-stake-9
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'stake', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Stake'], 'errors': ['You cannot stake zero tokens'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['lpToken', 'stakingBalance', 'yieldBalance', 'lpToken', 'stakingBalance', 'startTime', 'trenchIndex', 'trenches'], 'written': []}, 'src': '138#156'}"}
函数切片:
    function stake(uint256 amount) external {
        // amount to stake and user's balance can not be 0
        require(
            amount > 0 &&
            lpToken.balanceOf(msg.sender) >= amount, 
            "You cannot stake zero tokens");
        
        // if user is already staking, calculate up-to-date yield
        if(stakingBalance[msg.sender] > 0){
            uint256 yieldEarned = getUsersYieldAmount(msg.sender);
            yieldBalance[msg.sender] = yieldEarned;
        }

        lpToken.transferFrom(msg.sender, address(this), amount); // add LP tokens to the staking pool
        stakingBalance[msg.sender] += amount;
        startTime[msg.sender] = block.timestamp; // upserting the staking schedule whether user is already staking or not
        trenchIndex[msg.sender] = trenches.length - 1;
        emit Stake(msg.sender, amount);
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-unstake-10
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'unstake', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Unstake'], 'errors': ['Nothing to unstake'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['stakingBalance', 'FEE', 'lpToken', 'formToken', 'yieldBalance', 'FEE_BALANCE', 'startTime', 'stakingBalance', 'trenchIndex', 'trenches'], 'written': []}, 'src': '158#177'}"}
函数切片:
    function unstake(uint256 amount) external {
        require(
            stakingBalance[msg.sender] >= amount, 
            "Nothing to unstake"
        );

        uint256 lpFeeValue = amount * FEE / 1000;
        uint256 lpTransferValue = amount - lpFeeValue;
        uint256 formTransferValue = getUsersYieldAmount(msg.sender);

        lpToken.transfer(msg.sender, lpTransferValue); // transfer LP tokens
        formToken.transfer(msg.sender, formTransferValue); // transfer FORM tokens
        yieldBalance[msg.sender] = 0;
        FEE_BALANCE += lpFeeValue;
        startTime[msg.sender] = block.timestamp;
        stakingBalance[msg.sender] -= amount;
        trenchIndex[msg.sender] = trenches.length - 1;

        emit Unstake(msg.sender, amount);
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-withdrawYield-11
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'withdrawYield', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['YieldWithdraw'], 'errors': ['Nothing to withdraw'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['formToken', 'startTime', 'yieldBalance', 'trenchIndex', 'trenches'], 'written': []}, 'src': '179#192'}"}
函数切片:
    function withdrawYield() external {
        uint256 yieldEarned = getUsersYieldAmount(msg.sender);
        require(yieldEarned > 0, "Nothing to withdraw");

        uint256 transferValue = yieldEarned;

        formToken.transfer(msg.sender, transferValue);

        startTime[msg.sender] = block.timestamp;
        yieldBalance[msg.sender] = 0;
        trenchIndex[msg.sender] = trenches.length - 1;

        emit YieldWithdraw(msg.sender, transferValue);
    }
------------------------------------------------
函数切片ID: Formation.Fi-LPFarm.sol-withdrawFee-12
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-LPFarm.sol', 'is_fault': False, 'message': "{'name': 'withdrawFee', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['FeeWithdraw'], 'errors': ['Nothing to withdraw', 'FORBIDDEN'], 'contract': 'Formation.Fi-LPFarm.sol', 'external_calls': [], 'state_vars': {'read': ['FEE_BALANCE', 'FEE_TO', 'FEE_BALANCE', 'lpToken', 'FEE_BALANCE'], 'written': []}, 'src': '194#201'}"}
函数切片:
    function withdrawFee() external {
        require(FEE_BALANCE > 0, "Nothing to withdraw");
        require(msg.sender == FEE_TO, 'FORBIDDEN');
        uint256 transferValue = FEE_BALANCE;
        lpToken.transfer(msg.sender, transferValue);
        FEE_BALANCE = 0;
        emit FeeWithdraw(msg.sender, transferValue);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Math.sol-max-0
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Math.sol', 'is_fault': False, 'message': "{'name': 'max', 'visibility': 'internal', 'stateMutability': 'pure', 'parameters': [{'name': 'a', 'type': 'uint256'}, {'name': 'b', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Math.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '12#14'}"}
函数切片:
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return a >= b ? a : b;
    }
------------------------------------------------
函数切片ID: Formation.Fi-Math.sol-min-1
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Math.sol', 'is_fault': False, 'message': "{'name': 'min', 'visibility': 'internal', 'stateMutability': 'pure', 'parameters': [{'name': 'a', 'type': 'uint256'}, {'name': 'b', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Math.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '19#21'}"}
函数切片:
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return a < b ? a : b;
    }
------------------------------------------------
函数切片ID: Formation.Fi-Math.sol-average-2
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Math.sol', 'is_fault': False, 'message': "{'name': 'average', 'visibility': 'internal', 'stateMutability': 'pure', 'parameters': [{'name': 'a', 'type': 'uint256'}, {'name': 'b', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Math.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '27#30'}"}
函数切片:
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b) / 2 can overflow, so we distribute.
        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Math.sol-ceilDiv-3
所属合约地址0xcb6afdc84e8949ddf49ab00b5b351a5b0f65a723
元数据:{'belong': 'Formation.Fi-Math.sol', 'is_fault': False, 'message': "{'name': 'ceilDiv', 'visibility': 'internal', 'stateMutability': 'pure', 'parameters': [{'name': 'a', 'type': 'uint256'}, {'name': 'b', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Math.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '38#41'}"}
函数切片:
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        // (a + b - 1) / b can overflow on addition, so we distribute.
        return a / b + (a % b == 0 ? 0 : 1);
    }
------------------------------------------------
函数切片ID: Formation.Fi-Context.sol-_msgSender-0
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Context.sol', 'is_fault': False, 'message': "{'name': '_msgSender', 'visibility': 'internal', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Context.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '16#18'}"}
函数切片:
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
------------------------------------------------
函数切片ID: Formation.Fi-Context.sol-_msgData-1
所属合约地址0xc356ef8082ea212f4db7e57f5aa845b69688cbba
元数据:{'belong': 'Formation.Fi-Context.sol', 'is_fault': False, 'message': "{'name': '_msgData', 'visibility': 'internal', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'bytes'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'Formation.Fi-Context.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '20#22'}"}
函数切片:
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
------------------------------------------------
故障定位结果：
{
    '攻击链条1': [
        'Formation.Fi-Vault.sol-swapIn-23',
        'Formation.Fi-Vault.sol-_issueSharesForAmount-5',
        'Formation.Fi-Vault.sol-deposit-3',
        'Formation.Fi-Vault.sol-transfer-12',
        'Formation.Fi-SafeERC20.sol-safeTransferFrom-1'
    ],
    '攻击链条2': [
        'Formation.Fi-Vault.sol-swapIn-23',
        'Formation.Fi-Vault.sol-_issueSharesForAmount-5',
        'Formation.Fi-Vault.sol-withdraw-4',
        'Formation.Fi-SafeERC20.sol-safeTransfer-0',
        'Formation.Fi-Address.sol-functionCallWithValue-5'
    ]
}

攻击链条分析解释:

攻击链条1（授权滥用+代币操控）：
1. 攻击者首先通过swapIn-23函数绕过权限检查（仅notLocked修饰符），传入精心构造的fee参数：
   - fee >= txFee的检查存在逻辑缺陷，允许攻击者设置fee=txFee使redistribution=0
   - 这导致totalTokens +=0，但treasuryAmount +=0，绕过代币总量校验
2. 随后调用deposit-3函数触发_issueSharesForAmount-5：
   - 当totalTokens被操纵为极小值时，newSupply = (amount * totalSupply)/totalTokens会被指数级放大
   - 攻击者通过存入极小金额即可铸造天量份额（_balances[to] += newSupply）
3. 通过transfer-12函数将份额转移至Uniswap池，制造虚假流动性
4. 最后通过SafeERC20的transferFrom-1完成USDT的套利转移

攻击链条2（价格操控+流动性抽离）：
1. 攻击者复用swapIn-23函数进行代币总量操控后，调用withdraw-4函数：
   - 当totalTokens被恶意放大时，tokensToTransfer = (shares * totalTokens)/totalSupply计算异常
   - 结合totalSupply -= shares的逆向操作，可实现超额代币提取
2. 通过safeTransfer-0将异常数量的代币转入Uniswap池，触发Sync事件掩盖真实余额
3. 利用functionCallWithValue-5进行底层调用，绕过Uniswap的流动性校验机制
4. 最终通过多次嵌套调用完成流动性抽离（trace中显示的交叉调用链）

根因函数列表：
攻击链条1：
[
    'Formation.Fi-Vault.sol-swapIn-23',
    'Formation.Fi-Vault.sol-_issueSharesForAmount-5'
]

攻击链条2：
[
    'Formation.Fi-Vault.sol-swapIn-23',
    'Formation.Fi-Vault.sol-withdraw-4'
]

根本原因排序依据：
1. swapIn-23（直接漏洞点）：
   - 未实施onlyBridge等权限控制，允许任意地址操作
   - fee校验逻辑缺陷（fee >= txFee）导致代币总量可被操纵
   - 关键状态变量totalTokens和treasuryAmount的更新缺乏安全校验

2. _issueSharesForAmount-5（次级漏洞点）：
   - 使用totalTokens作为除数但未做非零校验（require(_amount !=0 仅防除零错误）
   - 当totalTokens被外部操纵时，份额计算会产生指数级偏差

3. withdraw-4（辅助漏洞点）：
   - 依赖totalTokens和totalSupply的比例计算提取量，在总量被操控时可提取超额代币
   - 销毁份额时未做价格锚定校验，配合swapIn可实现虚假流动性注入/抽离
------------------------------------
运行时间:428.8962233066559seconds