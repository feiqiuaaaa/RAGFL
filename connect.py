import chromadb

if __name__ == '__main__':

    # 本地创建仓库
    client = chromadb.PersistentClient(path="./chroma")
    contract_collection = client.get_or_create_collection(
        name="Contract",
        metadata={"hnsw:space": "cosine"}
    )

    function_collection = client.get_or_create_collection(
        name="Function",
        metadata={"hnsw:space": "cosine"}
    )
    c_res = contract_collection.get()
    f_res = function_collection.get()

    # client = chromadb.HttpClient(host='47.102.102.136', port=8000)
    collection = client.get_or_create_collection("test_solidity_code")
    collection.add(
        documents=[
            "// SPDX-License-Identifier: MIT\n// Audit on 5-Jan-2021 by Keno and BoringCrypto\n\n// P1 - P3: OK\npragma solidity 0.6.12;\n\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\n// Edited by BoringCrypto\n\n// T1 - T4: OK\ncontract BoringOwnableData {\n    // V1 - V5: OK\n    address public owner;\n    // V1 - V5: OK\n    address public pendingOwner;\n}\n\n// T1 - T4: OK\ncontract BoringOwnable is BoringOwnableData {\n    // E1: OK\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () internal {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    // F1 - F9: OK\n    // C1 - C21: OK\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n        } else {\n            // Effects\n            pendingOwner = newOwner;\n        }\n    }\n\n    // F1 - F9: OK\n    // C1 - C21: OK\n    function claimOwnership() public {\n        address _pendingOwner = pendingOwner;\n        \n        // Checks\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(owner, _pendingOwner);\n        owner = _pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    // M1 - M5: OK\n    // C1 - C21: OK\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n}"
            ,
            "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport { ILiFi } from \"../Interfaces/ILiFi.sol\";\nimport { IAnyswapRouter } from \"../Interfaces/IAnyswapRouter.sol\";\nimport { LibDiamond } from \"../Libraries/LibDiamond.sol\";\nimport { LibAsset } from \"../Libraries/LibAsset.sol\";\nimport { LibSwap } from \"../Libraries/LibSwap.sol\";\nimport { IAnyswapToken } from \"../Interfaces/IAnyswapToken.sol\";\nimport { LibDiamond } from \"../Libraries/LibDiamond.sol\";\n\ncontract AnyswapFacet is ILiFi {\n    /* ========== Types ========== */\n\n    struct AnyswapData {\n        address token;\n        address router;\n        uint256 amount;\n        address recipient;\n        uint256 toChainId;\n    }\n\n    /* ========== Public Bridge Functions ========== */\n\n    /**\n     * @notice Bridges tokens via Anyswap\n     * @param _lifiData data used purely for tracking and analytics\n     * @param _anyswapData data specific to Anyswap\n     */\n    function startBridgeTokensViaAnyswap(LiFiData memory _lifiData, AnyswapData calldata _anyswapData) public payable {\n        if (_anyswapData.token != address(0)) {\n            address underlyingToken = IAnyswapToken(_anyswapData.token).underlying();\n\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(underlyingToken);\n            LibAsset.transferFromERC20(underlyingToken, msg.sender, address(this), _anyswapData.amount);\n\n            require(\n                LibAsset.getOwnBalance(underlyingToken) - _fromTokenBalance == _anyswapData.amount,\n                \"ERR_INVALID_AMOUNT\"\n            );\n        } else {\n            require(msg.value == _anyswapData.amount, \"ERR_INVALID_AMOUNT\");\n        }\n\n        _startBridge(_anyswapData);\n\n        emit LiFiTransferStarted(\n            _lifiData.transactionId,\n            _lifiData.integrator,\n            _lifiData.referrer,\n            _lifiData.sendingAssetId,\n            _lifiData.receivingAssetId,\n            _lifiData.receiver,\n            _lifiData.amount,\n            _lifiData.destinationChainId,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice Performs a swap before bridging via Anyswap\n     * @param _lifiData data used purely for tracking and analytics\n     * @param _swapData an array of swap related data for performing swaps before bridging\n     * @param _anyswapData data specific to Anyswap\n     */\n    function swapAndStartBridgeTokensViaAnyswap(\n        LiFiData memory _lifiData,\n        LibSwap.SwapData[] calldata _swapData,\n        AnyswapData memory _anyswapData\n    ) public payable {\n        if (_anyswapData.token != address(0)) {\n            address underlyingToken = IAnyswapToken(_anyswapData.token).underlying();\n            uint256 _fromTokenBalance = LibAsset.getOwnBalance(underlyingToken);\n\n            // Swap\n            for (uint8 i; i < _swapData.length; i++) {\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\n            }\n\n            uint256 _postSwapBalance = LibAsset.getOwnBalance(underlyingToken) - _fromTokenBalance;\n\n            require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\");\n\n            _anyswapData.amount = _postSwapBalance;\n        } else {\n            uint256 _fromBalance = address(this).balance;\n\n            // Swap\n            for (uint8 i; i < _swapData.length; i++) {\n                LibSwap.swap(_lifiData.transactionId, _swapData[i]);\n            }\n\n            require(address(this).balance - _fromBalance >= _anyswapData.amount, \"ERR_INVALID_AMOUNT\");\n\n            uint256 _postSwapBalance = address(this).balance - _fromBalance;\n\n            require(_postSwapBalance > 0, \"ERR_INVALID_AMOUNT\");\n\n            _anyswapData.amount = _postSwapBalance;\n        }\n\n        _startBridge(_anyswapData);\n\n        emit LiFiTransferStarted(\n            _lifiData.transactionId,\n            _lifiData.integrator,\n            _lifiData.referrer,\n            _lifiData.sendingAssetId,\n            _lifiData.receivingAssetId,\n            _lifiData.receiver,\n            _lifiData.amount,\n            _lifiData.destinationChainId,\n            block.timestamp\n        );\n    }\n\n    /* ========== Internal Functions ========== */\n\n    /**\n     * @dev Conatains the business logic for the bridge via Anyswap\n     * @param _anyswapData data specific to Anyswap\n     */\n    function _startBridge(AnyswapData memory _anyswapData) internal {\n        // Check chain id\n        require(block.chainid != _anyswapData.toChainId, \"Cannot bridge to the same network.\");\n\n        if (_anyswapData.token != address(0)) {\n            // Give Anyswap approval to bridge tokens\n            LibAsset.approveERC20(\n                IERC20(IAnyswapToken(_anyswapData.token).underlying()),\n                _anyswapData.router,\n                _anyswapData.amount\n            );\n\n            IAnyswapRouter(_anyswapData.router).anySwapOutUnderlying(\n                _anyswapData.token,\n                _anyswapData.recipient,\n                _anyswapData.amount,\n                _anyswapData.toChainId\n            );\n        } else {\n            IAnyswapRouter(_anyswapData.router).anySwapOutNative{ value: _anyswapData.amount }(\n                _anyswapData.token,\n                _anyswapData.recipient,\n                _anyswapData.toChainId\n            );\n        }\n    }\n}\n"
            ,
            "/**\n * SPDX-License-Identifier: MIT\n**/\n\npragma solidity =0.7.6;\npragma experimental ABIEncoderV2;\n\nimport './Bip.sol';\n\n/**\n * @author Publius\n * @title Voting Booth\n**/\ncontract VotingBooth is Bip {\n\n    using SafeMath for uint256;\n    using LibSafeMath32 for uint32;\n    \n    event Vote(address indexed account, uint32 indexed bip, uint256 roots);\n\n    /**\n     * Voting\n    **/\n\n    function _vote(address account, uint32 bipId) internal {\n        recordVote(account, bipId);\n        placeVotedUntil(account, bipId);\n\n        emit Vote(account, bipId, balanceOfRoots(account));\n    }\n\n    function recordVote(address account, uint32 bipId) internal {\n        s.g.voted[bipId][account] = true;\n        s.g.bips[bipId].roots = s.g.bips[bipId].roots.add(balanceOfRoots(account));\n    }\n\n    function unrecordVote(address account, uint32 bipId) internal {\n        s.g.voted[bipId][account] = false;\n        s.g.bips[bipId].roots = s.g.bips[bipId].roots.sub(balanceOfRoots(account));\n    }\n\n    function placeVotedUntil(address account, uint32 bipId) internal {\n        uint32 newLock = startFor(bipId).add(periodFor(bipId));\n        if (newLock > s.a[account].votedUntil) {\n                s.a[account].votedUntil = newLock;\n        }\n    }\n\n    function updateVotedUntil(address account) internal {\n        uint32[] memory actives = activeBips();\n        uint32 lastSeason = 0;\n        for (uint256 i = 0; i < actives.length; i++) {\n            uint32 activeBip = actives[i];\n            if (s.g.voted[activeBip][account]) {\n                uint32 bipEnd = startFor(activeBip).add(periodFor(activeBip));\n                if (bipEnd > lastSeason) lastSeason = bipEnd;\n            }\n        }\n        s.a[account].votedUntil = lastSeason;\n    }\n\n}\n"
            ,
            "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"hardhat/console.sol\";\nimport \"./interfaces/IMonoXPool.sol\";\nimport './interfaces/IWETH.sol';\nimport './libraries/MonoXLibrary.sol';\n\ninterface IvCash is IERC20 {\n  function mint (address account, uint256 amount) external;\n\n  function burn (address account, uint256 amount) external;\n}\n\n\n/**\n * The Monoswap is ERC1155 contract does this and that...\n */\ncontract Monoswap is Initializable, OwnableUpgradeable {\n  using SafeMath for uint256;\n  using SafeMath for uint112;\n  using SafeERC20 for IERC20;\n  using SafeERC20 for IvCash;\n\n  IvCash vCash;\n  address WETH;\n  address feeTo;\n  uint16 fees; // over 1e5, 300 means 0.3%\n  uint16 devFee; // over 1e5, 50 means 0.05%\n\n  uint256 constant MINIMUM_LIQUIDITY=100;\n  \n  struct PoolInfo {\n    uint256 pid;\n    uint256 lastPoolValue;\n    address token;\n    PoolStatus status;\n    uint112 vcashDebt;\n    uint112 vcashCredit;\n    uint112 tokenBalance;\n    uint256 price; // over 1e18\n    uint256 createdAt; // timestamp\n  }\n\n  enum TxType {\n    SELL,\n    BUY\n  }\n\n  enum PoolStatus {\n    UNLISTED,\n    LISTED,\n    OFFICIAL,\n    SYNTHETIC,\n    PAUSED\n  }\n  \n  mapping (address => PoolInfo) public pools;\n  // tokenStatus is for token lock/transfer. exempt means no need to verify post tx\n  mapping (address => uint8) private tokenStatus; //0=unlocked, 1=locked, 2=exempt\n\n  // token poool status is to track if the pool has already been created for the token\n  mapping (address => uint8) public tokenPoolStatus; //0=undefined, 1=exists\n  \n  // negative vCash balance allowed for each token\n  mapping (address => uint) public tokenInsurance;\n\n  uint256 public poolSize;\n\n  uint private unlocked;\n  modifier lock() {\n    require(unlocked == 1, 'MonoX:LOCKED');\n    unlocked = 0;\n    _;\n    unlocked = 1;\n  }\n\n  modifier lockToken(address _token) { \n    uint8 originalState = tokenStatus[_token];\n    require(originalState!=1, 'MonoX:POOL_LOCKED');\n    if(originalState==0) {\n      tokenStatus[_token] = 1;\n    }\n    _;\n    if(originalState==0) {\n      tokenStatus[_token] = 0;\n    }\n  }\n\n  modifier ensure(uint deadline) {\n    require(deadline >= block.timestamp, 'MonoX:EXPIRED');\n    _;\n  }  \n\n  modifier onlyPriceAdjuster(){\n    require(priceAdjusterRole[msg.sender]==true,\"MonoX:BAD_ROLE\");\n    _;\n  }\n\n  event AddLiquidity(address indexed provider, \n    uint indexed pid,\n    address indexed token,\n    uint liquidityAmount,\n    uint vcashAmount, uint tokenAmount, uint price);\n\n  event RemoveLiquidity(address indexed provider, \n    uint indexed pid,\n    address indexed token,\n    uint liquidityAmount,\n    uint vcashAmount, uint tokenAmount, uint price);\n\n  event Swap(\n    address indexed user,\n    address indexed tokenIn,\n    address indexed tokenOut,\n    uint amountIn,\n    uint amountOut,\n    uint swapVcashValue\n  );\n\n  // event PriceAdjusterChanged(\n  //   address indexed priceAdjuster,\n  //   bool added\n  // );\n\n  event PoolBalanced(\n    address _token,\n    uint vcashIn\n  );\n\n  event SyntheticPoolPriceChanged(\n    address _token,\n    uint price\n  );\n\n  event PoolStatusChanged(\n    address _token,\n    PoolStatus oldStatus,\n    PoolStatus newStatus\n  );\n\n  IMonoXPool public monoXPool;\n  \n  // mapping (token address => block number of the last trade)\n  mapping (address => uint) public lastTradedBlock; \n\n  uint256 constant MINIMUM_POOL_VALUE = 10000 * 1e18;\n  mapping (address=>bool) public priceAdjusterRole;\n\n  // ------------\n  uint public poolSizeMinLimit;\n\n\n  function initialize(IMonoXPool _monoXPool, IvCash _vcash) public initializer {\n    OwnableUpgradeable.__Ownable_init();\n    monoXPool = _monoXPool;\n    vCash = _vcash;\n    WETH = _monoXPool.WETH();\n    fees = 300;\n    devFee = 50;\n    poolSize = 0;\n    unlocked = 1;\n  }\n\n  // receive() external payable {\n  //   assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n  // }\n\n  function setFeeTo (address _feeTo) onlyOwner external {\n    feeTo = _feeTo;\n  }\n  \n  function setFees (uint16 _fees) onlyOwner external {\n    require(_fees<1e3);\n    fees = _fees;\n  }\n\n  function setDevFee (uint16 _devFee) onlyOwner external {\n    require(_devFee<1e3);\n    devFee = _devFee;\n  }\n\n  function setPoolSizeMinLimit(uint _poolSizeMinLimit) onlyOwner external {\n    poolSizeMinLimit = _poolSizeMinLimit;\n  }\n\n  function setTokenInsurance (address _token, uint _insurance) onlyOwner external {\n    tokenInsurance[_token] = _insurance;\n  }\n\n  // when safu, setting token status to 2 can achieve significant gas savings \n  function setTokenStatus (address _token, uint8 _status) onlyOwner external {\n    tokenStatus[_token] = _status;\n  } \n\n  // update status of a pool. onlyOwner.\n  function updatePoolStatus(address _token, PoolStatus _status) external onlyOwner {    \n\n    PoolStatus poolStatus = pools[_token].status;\n    if(poolStatus==PoolStatus.PAUSED){\n      require(block.number > lastTradedBlock[_token].add(6000), \"MonoX:TOO_EARLY\");\n    }\n    else{\n      // okay to pause an official pool, wait 6k blocks and then convert it to synthetic\n      require(_status!=PoolStatus.SYNTHETIC,\"MonoX:NO_SYNT\");\n    }\n      \n    emit PoolStatusChanged(_token, poolStatus,_status);\n    pools[_token].status = _status;\n\n    // unlisting a token allows creating a new pool of the same token. \n    // should move it to PAUSED if the goal is to blacklist the token forever\n    if(_status==PoolStatus.UNLISTED) {\n      tokenPoolStatus[_token] = 0;\n    }\n  }\n  \n  /**\n    @dev update pools price if there were no active trading for the last 6000 blocks\n    @notice Only owner callable, new price can neither be 0 nor be equal to old one\n    @param _token pool identifider (token address)\n    @param _newPrice new price in wei (uint112)\n   */\n  function updatePoolPrice(address _token, uint _newPrice) external onlyOwner {\n    require(_newPrice > 0, 'MonoX:0_PRICE');\n    require(tokenPoolStatus[_token] != 0, \"MonoX:NO_POOL\");\n\n    require(block.number > lastTradedBlock[_token].add(6000), \"MonoX:TOO_EARLY\");\n    pools[_token].price = _newPrice;\n    lastTradedBlock[_token] = block.number;\n  }\n\n  function updatePriceAdjuster(address account, bool _status) external onlyOwner{\n    priceAdjusterRole[account]=_status;\n    //emit PriceAdjusterChanged(account,_status);\n  }\n\n  function setSynthPoolPrice(address _token, uint price) external onlyPriceAdjuster {\n    require(pools[_token].status==PoolStatus.SYNTHETIC,\"MonoX:NOT_SYNT\");\n    require(price > 0, \"MonoX:ZERO_PRICE\");\n    pools[_token].price=price;\n    emit SyntheticPoolPriceChanged(_token,price);\n  }\n\n  function rebalancePool(address _token) external lockToken(_token) onlyOwner{\n      // // PoolInfo memory pool = pools[_token];\n      // uint poolPrice = pools[_token].price;\n      // require(vcashIn <= pools[_token].vcashDebt,\"MonoX:NO_CREDIT\");\n      // require((pools[_token].tokenBalance * poolPrice).div(1e18) >= vcashIn,\"MonoX:INSUF_TOKEN_VAL\");\n      // // uint rebalancedAmount = vcashIn.mul(1e18).div(pool.price);\n      // monoXPool.safeTransferERC20Token(_token, msg.sender, vcashIn.mul(1e18).div(poolPrice));\n      // _syncPoolInfo(_token, vcashIn, 0);\n      // emit PoolBalanced(_token, vcashIn);\n\n      _internalRebalance(_token);\n  }\n\n  // must be called from a method with token lock to prevent reentry\n  function _internalRebalance(address _token) internal {\n    uint poolPrice = pools[_token].price;\n    uint vcashIn = pools[_token].vcashDebt;\n    if(poolPrice.mul(pools[_token].tokenBalance) / 1e18 < vcashIn){\n      vcashIn = poolPrice.mul(pools[_token].tokenBalance) / 1e18;\n    }\n\n    if(tokenStatus[_token]==2){\n      monoXPool.safeTransferERC20Token(_token, feeTo, vcashIn.mul(1e18).div(poolPrice));\n    }else{\n      uint256 balanceIn0 = IERC20(_token).balanceOf(address(monoXPool));\n      monoXPool.safeTransferERC20Token(_token, feeTo, vcashIn.mul(1e18).div(poolPrice));\n      uint256 balanceIn1 = IERC20(_token).balanceOf(address(monoXPool));\n      uint realAmount = balanceIn0.sub(balanceIn1);\n\n      vcashIn = realAmount.mul(poolPrice) / 1e18;\n    }\n    \n    _syncPoolInfo(_token, vcashIn, 0);\n    emit PoolBalanced(_token,vcashIn);\n  }\n\n  // creates a pool\n  function _createPool (address _token, uint _price, PoolStatus _status) lock internal returns(uint256 _pid)  {\n    require(tokenPoolStatus[_token]==0, \"MonoX:POOL_EXISTS\");\n    require (_token != address(vCash), \"MonoX:NO_vCash\");\n    _pid = poolSize;\n    pools[_token] = PoolInfo({\n      token: _token,\n      pid: _pid,\n      vcashCredit: 0,\n      vcashDebt: 0,\n      tokenBalance: 0,\n      lastPoolValue: 0,\n      status: _status,\n      price: _price,\n      createdAt: block.timestamp\n    });\n\n    poolSize = _pid.add(1);\n    tokenPoolStatus[_token]=1;\n\n    // initialze pool's lasttradingblocknumber as the block number on which the pool is created\n    lastTradedBlock[_token] = block.number;\n  }\n\n  // creates a pool with special status\n  function addSpecialToken (address _token, uint _price, PoolStatus _status) onlyOwner external returns(uint256 _pid)  {\n    _pid = _createPool(_token, _price, _status);\n  }\n\n  // internal func to pay contract owner\n  function _mintFee (uint256 pid, uint256 lastPoolValue, uint256 newPoolValue) internal {\n    \n    // dropping tx fees for now\n    return;\n    \n  }\n\n  // util func to get some basic pool info\n  function getPool (address _token) view public returns (uint256 poolValue, \n    uint256 tokenBalanceVcashValue, uint256 vcashCredit, uint256 vcashDebt) {\n    // PoolInfo memory pool = pools[_token];\n    vcashCredit = pools[_token].vcashCredit;\n    vcashDebt = pools[_token].vcashDebt;\n    tokenBalanceVcashValue = pools[_token].price.mul(pools[_token].tokenBalance)/1e18;\n\n    poolValue = tokenBalanceVcashValue.add(vcashCredit).sub(vcashDebt);\n  }\n\n  // trustless listing pool creation. always creates unofficial pool\n  function listNewToken (address _token, uint _price, \n    uint256 vcashAmount, \n    uint256 tokenAmount,\n    address to) external returns(uint _pid, uint256 liquidity) {\n    _pid = _createPool(_token, _price, PoolStatus.LISTED);\n    liquidity = _addLiquidityPair(_token, vcashAmount, tokenAmount, msg.sender, to);\n  }\n\n  // add liquidity pair to a pool. allows adding vcash.\n  function addLiquidityPair (address _token, \n    uint256 vcashAmount, \n    uint256 tokenAmount,\n    address to) external returns(uint256 liquidity) {\n    liquidity = _addLiquidityPair(_token, vcashAmount, tokenAmount, msg.sender, to);\n  }\n\n    // add liquidity pair to a pool. allows adding vcash.\n  function _addLiquidityPair (address _token, \n    uint256 vcashAmount, \n    uint256 tokenAmount,\n    address from,\n    address to) internal lockToken(_token) returns(uint256 liquidity) {\n    require (tokenAmount>0, \"MonoX:BAD_AMOUNT\");\n\n    require(tokenPoolStatus[_token]==1, \"MonoX:NO_POOL\");\n    \n    // (uint256 poolValue, , ,) = getPool(_token);\n    PoolInfo memory pool = pools[_token];\n    IMonoXPool monoXPoolLocal = monoXPool;\n    \n    uint256 poolValue = pool.price.mul(pool.tokenBalance)/1e18;\n    poolValue = poolValue.add(pool.vcashCredit).sub(pool.vcashDebt);\n\n    \n    _mintFee(pool.pid, pool.lastPoolValue, poolValue);\n\n    tokenAmount = transferAndCheck(from,address(monoXPoolLocal),_token,tokenAmount);\n\n    if(vcashAmount>0){\n      vCash.safeTransferFrom(msg.sender, address(monoXPoolLocal), vcashAmount);\n      vCash.burn(address(monoXPool), vcashAmount);\n    }\n\n    // this is to avoid stack too deep\n    {\n      uint256 _totalSupply = monoXPoolLocal.totalSupplyOf(pool.pid);\n      uint256 liquidityVcashValue = vcashAmount.add(tokenAmount.mul(pool.price)/1e18);\n\n      if(_totalSupply==0){\n        liquidityVcashValue = liquidityVcashValue/1e6; // so $1m would get you 1e18\n        liquidity = liquidityVcashValue.sub(MINIMUM_LIQUIDITY);\n        // sorry, oz doesn't allow minting to address(0)\n        monoXPoolLocal.mintLp(feeTo, pool.pid, MINIMUM_LIQUIDITY, pool.status == PoolStatus.LISTED); \n      }else{\n        liquidity = _totalSupply.mul(liquidityVcashValue).div(poolValue);\n      }\n    }\n    \n    monoXPoolLocal.mintLp(to, pool.pid, liquidity, pool.status == PoolStatus.LISTED);\n    _syncPoolInfo(_token, vcashAmount, 0);\n\n    emit AddLiquidity(to, \n    pool.pid,\n    _token,\n    liquidity, \n    vcashAmount, tokenAmount, pool.price);\n  }\n  \n  // add one-sided liquidity to a pool. no vcash\n  function addLiquidity (address _token, uint256 _amount, address to) external returns(uint256 liquidity)  {\n    liquidity = _addLiquidityPair(_token, 0, _amount, msg.sender, to);\n  }  \n\n  // add one-sided ETH liquidity to a pool. no vcash\n  function addLiquidityETH (address to) external payable returns(uint256 liquidity)  {\n    MonoXLibrary.safeTransferETH(address(monoXPool), msg.value);\n    monoXPool.depositWETH(msg.value);\n    liquidity = _addLiquidityPair(WETH, 0, msg.value, address(this), to);\n  }  \n\n  // updates pool vcash balance, token balance and last pool value.\n  // this function requires others to do the input validation\n  function _syncPoolInfo (address _token, uint256 vcashIn, uint256 vcashOut) internal {\n    // PoolInfo memory pool = pools[_token];\n    uint256 tokenPoolPrice = pools[_token].price;\n    (uint256 vcashCredit, uint256 vcashDebt) = _updateVcashBalance(_token, vcashIn, vcashOut);\n\n    uint256 tokenReserve = IERC20(_token).balanceOf(address(monoXPool));\n    uint256 tokenBalanceVcashValue = tokenPoolPrice.mul(tokenReserve)/1e18;\n\n    require(tokenReserve <= uint112(-1));\n    pools[_token].tokenBalance = uint112(tokenReserve);\n    // poolValue = tokenBalanceVcashValue.add(vcashCredit).sub(vcashDebt);\n    pools[_token].lastPoolValue = tokenBalanceVcashValue.add(vcashCredit).sub(vcashDebt);\n  }\n  \n  // view func for removing liquidity\n  function _removeLiquidity (address _token, uint256 liquidity,\n    address to) view public returns(\n    uint256 poolValue, uint256 liquidityIn, uint256 vcashOut, uint256 tokenOut) {\n    \n    require (liquidity>0, \"MonoX:BAD_AMOUNT\");\n    uint256 tokenBalanceVcashValue;\n    uint256 vcashCredit;\n    uint256 vcashDebt;\n    PoolInfo memory pool = pools[_token];\n    IMonoXPool monoXPoolLocal = monoXPool;\n    uint256 lastAdded = monoXPoolLocal.liquidityLastAddedOf(pool.pid, msg.sender);\n    \n    require((lastAdded + (pool.status == PoolStatus.OFFICIAL ? 4 hours : pool.status == PoolStatus.LISTED ? 24 hours : 0)) <= block.timestamp, \"MonoX:WRONG_TIME\"); // Users are not allowed to remove liquidity right after adding\n    address topLPHolder = monoXPoolLocal.topLPHolderOf(pool.pid);\n    require(pool.status != PoolStatus.LISTED || msg.sender != topLPHolder || pool.createdAt + 90 days < block.timestamp, \"MonoX:TOP_HOLDER & WRONG_TIME\"); // largest LP holder is not allowed to remove LP within 90 days after pool creation\n\n    (poolValue, tokenBalanceVcashValue, vcashCredit, vcashDebt) = getPool(_token);\n    uint256 _totalSupply = monoXPool.totalSupplyOf(pool.pid);\n\n    liquidityIn = monoXPool.balanceOf(to, pool.pid)>liquidity?liquidity:monoXPool.balanceOf(to, pool.pid);\n    uint256 tokenReserve = IERC20(_token).balanceOf(address(monoXPool));\n    \n    if(tokenReserve < pool.tokenBalance){\n      tokenBalanceVcashValue = tokenReserve.mul(pool.price)/1e18;\n    }\n\n    if(vcashDebt>0){\n      tokenReserve = (tokenBalanceVcashValue.sub(vcashDebt)).mul(1e18).div(pool.price);\n    }\n\n    // if vcashCredit==0, vcashOut will be 0 as well\n    vcashOut = liquidityIn.mul(vcashCredit).div(_totalSupply);\n\n    tokenOut = liquidityIn.mul(tokenReserve).div(_totalSupply);\n\n  }\n  \n  // actually removes liquidity\n  function removeLiquidity (address _token, uint256 liquidity, address to, \n    uint256 minVcashOut, \n    uint256 minTokenOut) external returns(uint256 vcashOut, uint256 tokenOut)  {\n    (vcashOut, tokenOut) = _removeLiquidityHelper (_token, liquidity, to, minVcashOut, minTokenOut, false);\n  }\n\n  // actually removes liquidity\n  function _removeLiquidityHelper (address _token, uint256 liquidity, address to, \n    uint256 minVcashOut, \n    uint256 minTokenOut,\n    bool isETH) lockToken(_token) internal returns(uint256 vcashOut, uint256 tokenOut)  {\n    require (tokenPoolStatus[_token]==1, \"MonoX:NO_TOKEN\");\n    PoolInfo memory pool = pools[_token];\n    uint256 poolValue;\n    uint256 liquidityIn;\n    (poolValue, liquidityIn, vcashOut, tokenOut) = _removeLiquidity(_token, liquidity, to);\n    _mintFee(pool.pid, pool.lastPoolValue, poolValue);\n    require (vcashOut>=minVcashOut, \"MonoX:INSUFF_vCash\");\n    require (tokenOut>=minTokenOut, \"MonoX:INSUFF_TOKEN\");\n\n    if (vcashOut>0){\n      vCash.mint(to, vcashOut);\n    }\n    if (!isETH) {\n      monoXPool.safeTransferERC20Token(_token, to, tokenOut);\n    } else {\n      monoXPool.withdrawWETH(tokenOut);\n      monoXPool.safeTransferETH(to, tokenOut);\n    }\n\n    monoXPool.burn(to, pool.pid, liquidityIn);\n\n    _syncPoolInfo(_token, 0, vcashOut);\n\n    emit RemoveLiquidity(to, \n      pool.pid,\n      _token,\n      liquidityIn, \n      vcashOut, tokenOut, pool.price);\n  }\n\n  // actually removes ETH liquidity\n  function removeLiquidityETH (uint256 liquidity, address to, \n    uint256 minVcashOut, \n    uint256 minTokenOut) external returns(uint256 vcashOut, uint256 tokenOut)  {\n\n    (vcashOut, tokenOut) = _removeLiquidityHelper (WETH, liquidity, to, minVcashOut, minTokenOut, true);\n  }\n\n  // util func to compute new price\n  function _getNewPrice (uint256 originalPrice, uint256 reserve, \n    uint256 delta, uint256 deltaBlocks, TxType txType) pure internal returns(uint256 price) {\n    if(txType==TxType.SELL) {\n      // no risk of being div by 0\n      price = originalPrice.mul(reserve)/(reserve.add(delta));\n    }else{ // BUY\n      price = originalPrice.mul(reserve).div(reserve.sub(delta));\n    }\n  }\n\n  // util func to compute new price\n  function _getAvgPrice (uint256 originalPrice, uint256 newPrice) pure internal returns(uint256 price) {\n    price = originalPrice.add(newPrice.mul(4))/5;\n  }\n\n  // standard swap interface implementing uniswap router V2\n  \n  function swapExactETHForToken(\n    address tokenOut,\n    uint amountOutMin,\n    address to,\n    uint deadline\n  ) external virtual payable ensure(deadline) returns (uint amountOut) {\n    uint amountIn = msg.value;\n    MonoXLibrary.safeTransferETH(address(monoXPool), amountIn);\n    monoXPool.depositWETH(amountIn);\n    amountOut = swapIn(WETH, tokenOut, address(this), to, amountIn);\n    require(amountOut >= amountOutMin, 'MonoX:INSUFF_OUTPUT');\n  }\n  \n  function swapExactTokenForETH(\n    address tokenIn,\n    uint amountIn,\n    uint amountOutMin,\n    address to,\n    uint deadline\n  ) external virtual ensure(deadline) returns (uint amountOut) {\n    IMonoXPool monoXPoolLocal = monoXPool;\n    amountOut = swapIn(tokenIn, WETH, msg.sender, address(monoXPoolLocal), amountIn);\n    require(amountOut >= amountOutMin, 'MonoX:INSUFF_OUTPUT');\n    monoXPoolLocal.withdrawWETH(amountOut);\n    monoXPoolLocal.safeTransferETH(to, amountOut);\n  }\n\n  function swapETHForExactToken(\n    address tokenOut,\n    uint amountInMax,\n    uint amountOut,\n    address to,\n    uint deadline\n  ) external virtual payable ensure(deadline) returns (uint amountIn) {\n    uint amountSentIn = msg.value;\n    ( , , amountIn, ) = getAmountIn(WETH, tokenOut, amountOut);\n    MonoXLibrary.safeTransferETH(address(monoXPool), amountIn);\n    monoXPool.depositWETH(amountIn);\n    amountIn = swapOut(WETH, tokenOut, address(this), to, amountOut);\n    require(amountIn <= amountSentIn, 'MonoX:BAD_INPUT');\n    require(amountIn <= amountInMax, 'MonoX:EXCESSIVE_INPUT');\n    if (amountSentIn > amountIn) {\n      MonoXLibrary.safeTransferETH(msg.sender, amountSentIn.sub(amountIn));\n    }\n  }\n\n  function swapTokenForExactETH(\n    address tokenIn,\n    uint amountInMax,\n    uint amountOut,\n    address to,\n    uint deadline\n  ) external virtual ensure(deadline) returns (uint amountIn) {\n    IMonoXPool monoXPoolLocal = monoXPool;\n    amountIn = swapOut(tokenIn, WETH, msg.sender, address(monoXPoolLocal), amountOut);\n    require(amountIn <= amountInMax, 'MonoX:EXCESSIVE_INPUT');\n    monoXPoolLocal.withdrawWETH(amountOut);\n    monoXPoolLocal.safeTransferETH(to, amountOut);\n  }\n\n  function swapExactTokenForToken(\n    address tokenIn,\n    address tokenOut,\n    uint amountIn,\n    uint amountOutMin,\n    address to,\n    uint deadline\n  ) external virtual ensure(deadline) returns (uint amountOut) {\n    amountOut = swapIn(tokenIn, tokenOut, msg.sender, to, amountIn);\n    require(amountOut >= amountOutMin, 'MonoX:INSUFF_OUTPUT');\n  }\n\n  function swapTokenForExactToken(\n    address tokenIn,\n    address tokenOut,\n    uint amountInMax,\n    uint amountOut,\n    address to,\n    uint deadline\n  ) external virtual ensure(deadline) returns (uint amountIn) {\n    amountIn = swapOut(tokenIn, tokenOut, msg.sender, to, amountOut);\n    require(amountIn <= amountInMax, 'MonoX:EXCESSIVE_INPUT');\n  }\n\n  // util func to manipulate vcash balance\n  function _updateVcashBalance (address _token, \n    uint _vcashIn, uint _vcashOut) internal returns (uint _vcashCredit, uint _vcashDebt) {\n    if(_vcashIn>_vcashOut){\n      _vcashIn = _vcashIn - _vcashOut;\n      _vcashOut = 0;\n    }else{\n      _vcashOut = _vcashOut - _vcashIn;\n      _vcashIn = 0;\n    }\n\n    // PoolInfo memory _pool = pools[_token];\n    uint _poolVcashCredit = pools[_token].vcashCredit;\n    uint _poolVcashDebt = pools[_token].vcashDebt;\n    PoolStatus _poolStatus = pools[_token].status;\n    \n    if(_vcashOut>0){\n      (_vcashCredit, _vcashDebt) = MonoXLibrary.vcashBalanceSub(\n        _poolVcashCredit, _poolVcashDebt, _vcashOut);\n      require(_vcashCredit <= uint112(-1) && _vcashDebt <= uint112(-1));\n      pools[_token].vcashCredit = uint112(_vcashCredit);\n      pools[_token].vcashDebt = uint112(_vcashDebt);\n    }\n\n    if(_vcashIn>0){\n      (_vcashCredit, _vcashDebt) = MonoXLibrary.vcashBalanceAdd(\n        _poolVcashCredit, _poolVcashDebt, _vcashIn);\n      require(_vcashCredit <= uint112(-1) && _vcashDebt <= uint112(-1));\n      pools[_token].vcashCredit = uint112(_vcashCredit);\n      pools[_token].vcashDebt = uint112(_vcashDebt);\n    }\n\n    if(_poolStatus == PoolStatus.LISTED){\n\n      require (_vcashDebt<=tokenInsurance[_token], \"MonoX:INSUFF_vCash\");\n    }\n  }\n  \n  // updates pool token balance and price.\n  function _updateTokenInfo (address _token, uint256 _price,\n      uint256 _vcashIn, uint256 _vcashOut, uint256 _ETHDebt) internal {\n    uint256 _balance = IERC20(_token).balanceOf(address(monoXPool));\n    _balance = _balance.sub(_ETHDebt);\n    require(pools[_token].status!=PoolStatus.PAUSED,\"MonoX:PAUSED\");\n    require(_balance <= uint112(-1));\n    (uint initialPoolValue, , ,) = getPool(_token);\n    pools[_token].tokenBalance = uint112(_balance);\n    pools[_token].price = _price;\n\n    // record last trade's block number in mapping: lastTradedBlock\n    lastTradedBlock[_token] = block.number;\n\n    _updateVcashBalance(_token, _vcashIn, _vcashOut);\n\n    (uint poolValue, , ,) = getPool(_token);\n\n    require(initialPoolValue <= poolValue || poolValue >= poolSizeMinLimit,\n      \"MonoX:MIN_POOL_SIZE\");\n    \n    \n  }\n\n  function directSwapAllowed(uint tokenInPoolPrice,uint tokenOutPoolPrice, \n                              uint tokenInPoolTokenBalance, uint tokenOutPoolTokenBalance, PoolStatus status, bool getsAmountOut) internal pure returns(bool){\n      uint tokenInValue  = tokenInPoolTokenBalance.mul(tokenInPoolPrice).div(1e18);\n      uint tokenOutValue = tokenOutPoolTokenBalance.mul(tokenOutPoolPrice).div(1e18);\n      bool priceExists   = getsAmountOut?tokenInPoolPrice>0:tokenOutPoolPrice>0;\n      \n      // only if it's official pool with similar size\n      return priceExists&&status==PoolStatus.OFFICIAL&&tokenInValue>0&&tokenOutValue>0&&\n        ((tokenInValue/tokenOutValue)+(tokenOutValue/tokenInValue)==1);\n        \n  }\n\n  // view func to compute amount required for tokenIn to get fixed amount of tokenOut\n  function getAmountIn(address tokenIn, address tokenOut, \n    uint256 amountOut) public view returns (uint256 tokenInPrice, uint256 tokenOutPrice, \n    uint256 amountIn, uint256 tradeVcashValue) {\n    require(amountOut > 0, 'MonoX:INSUFF_INPUT');\n    \n    uint256 amountOutWithFee = amountOut.mul(1e5).div(1e5 - fees);\n    address vcashAddress = address(vCash);\n    uint tokenOutPoolPrice = pools[tokenOut].price;\n    uint tokenOutPoolTokenBalance = pools[tokenOut].tokenBalance;\n    if(tokenOut==vcashAddress){\n      tradeVcashValue = amountOutWithFee;\n      tokenOutPrice = 1e18;\n    }else{\n      require (tokenPoolStatus[tokenOut]==1, \"MonoX:NO_POOL\");\n      // PoolInfo memory tokenOutPool = pools[tokenOut];\n      PoolStatus tokenOutPoolStatus = pools[tokenOut].status;\n      \n      require (tokenOutPoolStatus != PoolStatus.UNLISTED, \"MonoX:POOL_UNLST\");\n      tokenOutPrice = _getNewPrice(tokenOutPoolPrice, tokenOutPoolTokenBalance, \n        amountOutWithFee, 0, TxType.BUY);\n\n      tradeVcashValue = _getAvgPrice(tokenOutPoolPrice, tokenOutPrice).mul(amountOutWithFee)/1e18;\n    }\n\n    if(tokenIn==vcashAddress){\n      amountIn = tradeVcashValue;\n      tokenInPrice = 1e18;\n    }else{\n      require (tokenPoolStatus[tokenIn]==1, \"MonoX:NO_POOL\");\n      // PoolInfo memory tokenInPool = pools[tokenIn];\n      PoolStatus tokenInPoolStatus = pools[tokenIn].status;\n      uint tokenInPoolPrice = pools[tokenIn].price;\n      uint tokenInPoolTokenBalance = pools[tokenIn].tokenBalance;\n      require (tokenInPoolStatus != PoolStatus.UNLISTED, \"MonoX:POOL_UNLST\");\n\n      amountIn = tradeVcashValue.add(tokenInPoolTokenBalance.mul(tokenInPoolPrice).div(1e18));\n      amountIn = tradeVcashValue.mul(tokenInPoolTokenBalance).div(amountIn);\n\n\n      bool allowDirectSwap=directSwapAllowed(tokenInPoolPrice,tokenOutPoolPrice,tokenInPoolTokenBalance,tokenOutPoolTokenBalance,tokenInPoolStatus,false);\n\n      // assuming p1*p2 = k, equivalent to uniswap's x * y = k\n      uint directSwapTokenInPrice = allowDirectSwap?tokenOutPoolPrice.mul(tokenInPoolPrice).div(tokenOutPrice):1;\n\n      tokenInPrice = _getNewPrice(tokenInPoolPrice, tokenInPoolTokenBalance, \n        amountIn, 0, TxType.SELL);\n\n      tokenInPrice = directSwapTokenInPrice > tokenInPrice?directSwapTokenInPrice:tokenInPrice;\n\n      amountIn = tradeVcashValue.mul(1e18).div(_getAvgPrice(tokenInPoolPrice, tokenInPrice));\n    }\n  }\n\n  // view func to compute amount required for tokenOut to get fixed amount of tokenIn\n  function getAmountOut(address tokenIn, address tokenOut, \n    uint256 amountIn) public view returns (uint256 tokenInPrice, uint256 tokenOutPrice, \n    uint256 amountOut, uint256 tradeVcashValue) {\n    require(amountIn > 0, 'MonoX:INSUFF_INPUT');\n    \n    uint256 amountInWithFee = amountIn.mul(1e5-fees)/1e5;\n    address vcashAddress = address(vCash);\n    uint tokenInPoolPrice = pools[tokenIn].price;\n    uint tokenInPoolTokenBalance = pools[tokenIn].tokenBalance;\n\n    if(tokenIn==vcashAddress){\n      tradeVcashValue = amountInWithFee;\n      tokenInPrice = 1e18;\n    }else{\n      require (tokenPoolStatus[tokenIn]==1, \"MonoX:NO_POOL\");\n      // PoolInfo memory tokenInPool = pools[tokenIn];\n      PoolStatus tokenInPoolStatus = pools[tokenIn].status;\n      \n      require (tokenInPoolStatus != PoolStatus.UNLISTED, \"MonoX:POOL_UNLST\");\n      \n      tokenInPrice = _getNewPrice(tokenInPoolPrice, tokenInPoolTokenBalance, \n        amountInWithFee, 0, TxType.SELL);\n      tradeVcashValue = _getAvgPrice(tokenInPoolPrice, tokenInPrice).mul(amountInWithFee)/1e18;\n    }\n\n    if(tokenOut==vcashAddress){\n      amountOut = tradeVcashValue;\n      tokenOutPrice = 1e18;\n    }else{\n      require (tokenPoolStatus[tokenOut]==1, \"MonoX:NO_POOL\");\n      // PoolInfo memory tokenOutPool = pools[tokenOut];\n      PoolStatus tokenOutPoolStatus = pools[tokenOut].status;\n      uint tokenOutPoolPrice = pools[tokenOut].price;\n      uint tokenOutPoolTokenBalance = pools[tokenOut].tokenBalance;\n\n      require (tokenOutPoolStatus != PoolStatus.UNLISTED, \"MonoX:POOL_UNLST\");\n      \n      amountOut = tradeVcashValue.add(tokenOutPoolTokenBalance.mul(tokenOutPoolPrice).div(1e18));\n      amountOut = tradeVcashValue.mul(tokenOutPoolTokenBalance).div(amountOut);\n\n      bool allowDirectSwap=directSwapAllowed(tokenInPoolPrice,tokenOutPoolPrice,tokenInPoolTokenBalance,tokenOutPoolTokenBalance,tokenOutPoolStatus,true);\n\n      // assuming p1*p2 = k, equivalent to uniswap's x * y = k\n      uint directSwapTokenOutPrice = allowDirectSwap?tokenInPoolPrice.mul(tokenOutPoolPrice).div(tokenInPrice):uint(-1);\n\n      // prevent the attack where user can use a small pool to update price in a much larger pool\n      tokenOutPrice = _getNewPrice(tokenOutPoolPrice, tokenOutPoolTokenBalance, \n        amountOut, 0, TxType.BUY);\n      tokenOutPrice = directSwapTokenOutPrice < tokenOutPrice?directSwapTokenOutPrice:tokenOutPrice;\n\n      amountOut = tradeVcashValue.mul(1e18).div(_getAvgPrice(tokenOutPoolPrice, tokenOutPrice));\n    }\n  }\n\n\n  // swap from tokenIn to tokenOut with fixed tokenIn amount.\n  function swapIn (address tokenIn, address tokenOut, address from, address to,\n      uint256 amountIn) internal lockToken(tokenIn) returns(uint256 amountOut)  {\n\n    address monoXPoolLocal = address(monoXPool);\n\n    amountIn = transferAndCheck(from,monoXPoolLocal,tokenIn,amountIn); \n    \n    // uint256 halfFeesInTokenIn = amountIn.mul(fees)/2e5;\n\n    uint256 tokenInPrice;\n    uint256 tokenOutPrice;\n    uint256 tradeVcashValue;\n    \n    (tokenInPrice, tokenOutPrice, amountOut, tradeVcashValue) = getAmountOut(tokenIn, tokenOut, amountIn);\n\n    uint256 oneSideFeesInVcash = tokenInPrice.mul(amountIn.mul(fees)/2e5)/1e18;\n\n    // trading in\n    if(tokenIn==address(vCash)){\n      vCash.burn(monoXPoolLocal, amountIn);\n      // all fees go to the other side\n      oneSideFeesInVcash = oneSideFeesInVcash.mul(2);\n    }else{\n      _updateTokenInfo(tokenIn, tokenInPrice, 0, tradeVcashValue.add(oneSideFeesInVcash), 0);\n    }\n\n    // trading out\n    if(tokenOut==address(vCash)){\n      vCash.mint(to, amountOut);\n    }else{\n      if (to != monoXPoolLocal) {\n        IMonoXPool(monoXPoolLocal).safeTransferERC20Token(tokenOut, to, amountOut);\n      }\n      _updateTokenInfo(tokenOut, tokenOutPrice, tradeVcashValue.add(oneSideFeesInVcash), 0, \n        to == monoXPoolLocal ? amountOut : 0);\n    }\n\n    if(pools[tokenIn].vcashDebt > 0 && pools[tokenIn].status == PoolStatus.OFFICIAL){\n      _internalRebalance(tokenIn);\n    }\n\n    emit Swap(to, tokenIn, tokenOut, amountIn, amountOut, tradeVcashValue);\n    \n  }\n\n  \n  // swap from tokenIn to tokenOut with fixed tokenOut amount.\n  function swapOut (address tokenIn, address tokenOut, address from, address to, \n      uint256 amountOut) internal lockToken(tokenIn) returns(uint256 amountIn)  {\n    uint256 tokenInPrice;\n    uint256 tokenOutPrice;\n    uint256 tradeVcashValue;\n    (tokenInPrice, tokenOutPrice, amountIn, tradeVcashValue) = getAmountIn(tokenIn, tokenOut, amountOut);\n    \n    address monoXPoolLocal = address(monoXPool);\n\n    amountIn = transferAndCheck(from,monoXPoolLocal,tokenIn,amountIn);\n\n    // uint256 halfFeesInTokenIn = amountIn.mul(fees)/2e5;\n\n    uint256 oneSideFeesInVcash = tokenInPrice.mul(amountIn.mul(fees)/2e5)/1e18;\n\n    // trading in\n    if(tokenIn==address(vCash)){\n      vCash.burn(monoXPoolLocal, amountIn);\n      // all fees go to buy side\n      oneSideFeesInVcash = oneSideFeesInVcash.mul(2);\n    }else {\n      _updateTokenInfo(tokenIn, tokenInPrice, 0, tradeVcashValue.add(oneSideFeesInVcash), 0);\n    }\n\n    // trading out\n    if(tokenOut==address(vCash)){\n      vCash.mint(to, amountOut);\n      // all fees go to sell side\n      _updateVcashBalance(tokenIn, oneSideFeesInVcash, 0);\n    }else{\n      if (to != monoXPoolLocal) {\n        IMonoXPool(monoXPoolLocal).safeTransferERC20Token(tokenOut, to, amountOut);\n      }\n      _updateTokenInfo(tokenOut, tokenOutPrice, tradeVcashValue.add(oneSideFeesInVcash), 0, \n        to == monoXPoolLocal ? amountOut:0 );\n    }\n\n     \n    if(pools[tokenIn].vcashDebt > 0 && pools[tokenIn].status == PoolStatus.OFFICIAL){\n      _internalRebalance(tokenIn);\n    }\n  \n\n    emit Swap(to, tokenIn, tokenOut, amountIn, amountOut, tradeVcashValue);\n\n  }\n  // function balanceOf(address account, uint256 id) public view returns (uint256) {\n  //   return monoXPool.balanceOf(account, id);\n  // }\n\n  function getConfig() public view returns (address _vCash, address _weth, address _feeTo, uint16 _fees, uint16 _devFee) {\n    _vCash = address(vCash);\n    _weth = WETH;\n    _feeTo = feeTo;\n    _fees = fees;\n    _devFee = devFee;\n  }\n\n  function transferAndCheck(address from,address to,address _token,uint amount) internal returns (uint256){\n    if(from == address(this)){\n      return amount; // if it's ETH\n    }\n\n    // if it's not ETH\n    if(tokenStatus[_token]==2){\n      IERC20(_token).safeTransferFrom(from, to, amount);\n      return amount;\n    }else{\n      uint256 balanceIn0 = IERC20(_token).balanceOf(to);\n      IERC20(_token).safeTransferFrom(from, to, amount);\n      uint256 balanceIn1 = IERC20(_token).balanceOf(to);\n      return balanceIn1.sub(balanceIn0);\n    }   \n\n  }\n}\n"
            ,
            "pragma solidity 0.5.16;\r\n\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20Detailed.sol\";\r\nimport \"@openzeppelin/contracts-ethereum-package/contracts/utils/ReentrancyGuard.sol\";\r\n\r\ncontract ForceProfitSharing is ERC20, ERC20Detailed, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    IERC20 public force;\r\n\r\n    event Withdraw(address indexed beneficiary, uint256 amount);\r\n    event Deposit(address indexed beneficiary, uint256 amount);\r\n\r\n    // Define the Force token contract\r\n    constructor(address _underlying) public {\r\n        force = IERC20(_underlying);\r\n        ERC20Detailed.initialize(\r\n            \"xFORCE\",\r\n            \"xFORCE\",\r\n            ERC20Detailed(_underlying).decimals()\r\n        );\r\n        ReentrancyGuard.initialize();\r\n    }\r\n\r\n    function deposit(uint256 amount) external nonReentrant {\r\n        // Gets the amount of Force locked in the contract\r\n        uint256 totalForce = force.balanceOf(address(this));\r\n        // Gets the amount of xForce in existence\r\n        uint256 totalShares = totalSupply();\r\n        // If no xForce exists, mint it 1:1 to the amount put in\r\n        if (totalShares == 0 || totalForce == 0) {\r\n            _mint(msg.sender, amount);\r\n        }\r\n        // Calculate and mint the amount of xForce the Force is worth. The ratio will change overtime, as xForce is burned/minted and Force deposited + gained from fees / withdrawn.\r\n        else {\r\n            uint256 what = amount.mul(totalShares).div(totalForce);\r\n            _mint(msg.sender, what);\r\n        }\r\n        // Lock the Force in the contract\r\n        force.transferFrom(msg.sender, address(this), amount);\r\n\r\n        emit Deposit(msg.sender, amount);\r\n    }\r\n\r\n    function withdraw(uint256 numberOfShares) external nonReentrant {\r\n        // Gets the amount of xForce in existence\r\n        uint256 totalShares = totalSupply();\r\n        // Calculates the amount of Force the xForce is worth\r\n        uint256 what =\r\n            numberOfShares.mul(force.balanceOf(address(this))).div(totalShares);\r\n        _burn(msg.sender, numberOfShares);\r\n        force.transfer(msg.sender, what);\r\n\r\n        emit Withdraw(msg.sender, what);\r\n    }\r\n}\r\n"],
        ids=["Sushi-BoringOwnable.sol", "Li.Fi-AnyswapFacet.sol", "Beanstalk-VotingBooth.sol", "MonoX-Monoswap.sol",
             "Force DAO-ForceProfitSharing.sol"]
    )

    # Which contracts use the ReentrancyGuard anti-reentrancy lock?
    # What is the function of the startBridgeTokensViaAnyswap?

    results = collection.query(
        query_texts=["Which contracts use the ReentrancyGuard anti-reentrancy lock?"],
        n_results=5,
        include=["distances"]
    )

    print(results)
