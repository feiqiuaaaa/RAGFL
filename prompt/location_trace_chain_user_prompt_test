现有对故障交易的初步分析，包含交易存在的问题/异常点、以及原因分析，同时给出了故障交易的trace调用链，根据该初步分析学习故障交易存在的问题，现有一组智能合约的函数切片，请结合故障异常现象和trace链条，逐步深入分析每个函数片段是否存在可疑的程序元素，是否是导致故障的根本原因，分析每个函数片段的进一步调用，定位出多套完整的可疑函数调用链
故障交易初步分析如下：
交易故障分析：
根据提供的交易数据和链上行为分析，故障交易（0x90fb0c...）存在以下异常点和漏洞利用特征：

### 一、关键异常点
1. **代币转移路径异常**
   - 故障交易中，WBTC（345,567,500 satoshi ≈3.456 BTC）和未知代币（1.53e9单位）通过多个流动性池兑换为WETH（约21,148 ETH），随后几乎全部WETH被转入SushiSwap池并兑换为SUSHI（9e18单位，价值极高）。
   - 非故障交易中，类似操作（如ALCX、SNX兑换）的兑换比例和最终SUSHI转移量显著低于故障交易，表明故障交易的资金流动规模异常。

2. **极小金额Swap事件**
   在交易对0xf41e...8724中，输入1.53e9代币仅输出0.000000000002393 ETH，此操作疑似绕过流动性池的滑点检查或手续费计算漏洞。

3. **Gas消耗异常**
   故障交易消耗395,221 Gas，远高于非故障交易（265,069-360,036 Gas），表明合约执行了更复杂的逻辑或多次重入调用。

4. **最终接收地址固定**
   所有交易最终均将SUSHI转入0x8798...4272（SushiSwap社区多签地址），但结合漏洞场景，此地址可能被伪装或权限被恶意利用。

---

### 二、漏洞原因分析
1. **流动性池价格操纵（Price Manipulation）**
   - 攻击者通过**低流动性池**（如0xf41e...8724）发起大额代币输入，利用池内代币储备量不平衡，操纵价格计算公式（如Uniswap V2的恒定乘积模型），以极小代价获取高价值WETH。
   - 具体步骤：
     1. 在低流动性池中注入大额代币，人为抬高输出代币（WETH）的虚拟价格。
     2. 在后续交易中，通过高流动性池（如0xceff...a58）以被操纵的价格兑换WETH，套取超额利润。

2. **路由合约权限漏洞**
   - 路由合约（0xe11fc0...df50）在调用外部池时，未对`msg.sender`进行严格验证，允许攻击者通过伪装调用参数，将兑换所得代币强制转入指定地址（0x8798...4272）。

3. **代币销毁/铸造逻辑缺陷**
   - 在多个交易中，LP代币（如0x9a13...5e3）的销毁与铸造事件存在数量不匹配（如销毁量≠铸造量），可能被利用进行虚增流动性或绕过手续费扣除。

4. **SUSHI代币合约授权滥用**
   - 攻击者通过**无限授权**（infinite approval）获得对SushiSwap池合约（0x7950...1fb0）的控制权，允许其直接从用户地址转出SUSHI，导致最终大额资金泄露。

---

### 三、攻击路径还原
1. **准备阶段**
   - 攻击者向低流动性池（如0xf41e...8724）注入大量低价值代币（如DIGG），扭曲WETH兑换比例。

2. **攻击执行**
   - 通过路由合约发起多步Swap：
     - 步骤1：WBTC → WETH（高价值池，正常比例）。
     - 步骤2：DIGG → WETH（被操纵池，获取超额WETH）。
     - 步骤3：WETH → SUSHI（转入固定地址完成套现）。

3. **资金转移**
   - 利用SUSHI合约的授权漏洞，将兑换所得SUSHI批量转入攻击者控制地址（0x8798...4272）。

---

### 四、trace调用链（故障交易）
1. **调用层级**
   - 用户地址（0x5184...3528） → 路由合约（0xe11fc0...df50）
   - 路由合约 → Uniswap V2工厂（0xc0aee4...f2ac） → 流动性池（0x9a13...5e3）
   - 流动性池 → WBTC合约（0x2260...c599） → 转账至路由合约
   - 路由合约 → 交易对（0xceff...a58） → 兑换WETH
   - 路由合约 → SushiSwap池（0x7950...1fb0） → 最终转入0x8798...4272

2. **完整合约地址**
   - 路由合约: 0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
   - WBTC池: 0x9a13867048e01c663ce8ce2fe0cdae69ff9f35e3
   - WETH交易对: 0xceff51756c56ceffca006cd410b03ffc46dd3a58
   - SushiSwap池: 0x795065dcc9f64b5614c407a6efdc400da6221fb0
   - 接收地址: 0x8798249c2e607446efb7ad49ec89dd1865ff4272

---

### 五、修复建议
1. 在路由合约中增加滑点校验（如限制最小输出量）。
2. 对低流动性池的兑换操作引入时间加权平均价格（TWAP）机制。
3. 限制代币合约的无限授权模式，改用每笔交易单独授权。
4. 监控异常LP代币销毁/铸造事件，防止虚假流动性操作。

函数切片列表如下（包括函数切片ID、函数切片所属的合约地址、元数据、函数切片）：
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-constructor-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_factory', 'type': 'address'}, {'name': '_bar', 'type': 'address'}, {'name': '_sushi', 'type': 'address'}, {'name': '_weth', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'bar', 'sushi', 'weth'], 'written': []}, 'src': '43#48'}"}
函数切片:
    constructor (address _factory, address _bar, address _sushi, address _weth) public {
       factory = IUniswapV2Factory(_factory);
       bar = _bar;
       sushi = _sushi;
       weth = _weth;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-bridgeFor-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': True, 'message': "{'name': 'bridgeFor', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'token', 'type': 'address'}], 'returns': [{'name': 'bridge', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['_bridges', 'weth'], 'written': []}, 'src': '52#57'}"}
函数切片:
    function bridgeFor(address token) public view returns (address bridge) {
        bridge = _bridges[token];
        if (bridge == address(0)) {
            bridge = weth;
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-setBridge-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': 'setBridge', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'bridge', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['LogBridgeSet'], 'errors': ['SushiMaker: Invalid bridge'], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'weth', '_bridges'], 'written': []}, 'src': '61#68'}"}
函数切片:
    function setBridge(address token, address bridge) external onlyOwner {
        // Checks
        require(token != sushi && token != weth && token != bridge, "SushiMaker: Invalid bridge");

        // Effects
        _bridges[token] = bridge;
        emit LogBridgeSet(token, bridge);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-onlyEOA-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': 'onlyEOA', 'type': 'modifier', 'contract': 'SushiSwap-SushiMaker.sol', 'src': '73#77'}"}
函数切片:
    modifier onlyEOA() {
        // Try to make flash-loan exploit harder to do.
        require(msg.sender == tx.origin, "SushiMaker: must use EOA");
        _;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-convert-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': 'convert', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token0', 'type': 'address'}, {'name': 'token1', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '85#87'}"}
函数切片:
    function convert(address token0, address token1) external onlyEOA() {
        _convert(token0, token1);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-convertMultiple-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': 'convertMultiple', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token0', 'type': 'address[]'}, {'name': 'token1', 'type': 'address[]'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '92#98'}"}
函数切片:
    function convertMultiple(address[] calldata token0, address[] calldata token1) external onlyEOA() {
        // TODO: This can be optimized a fair bit, but this is safer and simpler for now
        uint256 len = token0.length;
        for(uint256 i=0; i < len; i++) {
            _convert(token0[i], token1[i]);
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-_convert-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': '_convert', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token0', 'type': 'address'}, {'name': 'token1', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['LogConvert'], 'errors': ['SushiMaker: Invalid pair'], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '102#116'}"}
函数切片:
    function _convert(address token0, address token1) internal {
        // Interactions
        // S1 - S4: OK
        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(token0, token1));
        require(address(pair) != address(0), "SushiMaker: Invalid pair");
        // balanceOf: S1 - S4: OK
        // transfer: X1 - X5: OK
        IERC20(address(pair)).safeTransfer(address(pair), pair.balanceOf(address(this)));
        // X1 - X5: OK
        (uint256 amount0, uint256 amount1) = pair.burn(address(this));
        if (token0 != pair.token0()) {
            (amount0, amount1) = (amount1, amount0);
        }
        emit LogConvert(msg.sender, token0, token1, amount0, amount1, _convertStep(token0, token1, amount0, amount1));
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-_convertStep-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': '_convertStep', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token0', 'type': 'address'}, {'name': 'token1', 'type': 'address'}, {'name': 'amount0', 'type': 'uint256'}, {'name': 'amount1', 'type': 'uint256'}], 'returns': [{'name': 'sushiOut', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'sushi', 'weth', 'weth', 'weth', 'weth', 'weth', 'weth', 'bar', 'sushi', 'bar', 'sushi', 'sushi', 'weth', 'weth', 'bar', 'sushi'], 'written': []}, 'src': '121#165'}"}
函数切片:
    function _convertStep(address token0, address token1, uint256 amount0, uint256 amount1) internal returns(uint256 sushiOut) {
        // Interactions
        if (token0 == token1) {
            uint256 amount = amount0.add(amount1);
            if (token0 == sushi) {
                IERC20(sushi).safeTransfer(bar, amount);
                sushiOut = amount;
            } else if (token0 == weth) {
                sushiOut = _toSUSHI(weth, amount);
            } else {
                address bridge = bridgeFor(token0);
                amount = _swap(token0, bridge, amount, address(this));
                sushiOut = _convertStep(bridge, bridge, amount, 0);
            }
        } else if (token0 == sushi) { // eg. SUSHI - ETH
            IERC20(sushi).safeTransfer(bar, amount0);
            sushiOut = _toSUSHI(token1, amount1).add(amount0);
        } else if (token1 == sushi) { // eg. USDT - SUSHI
            IERC20(sushi).safeTransfer(bar, amount1);
            sushiOut = _toSUSHI(token0, amount0).add(amount1);
        } else if (token0 == weth) { // eg. ETH - USDC
            sushiOut = _toSUSHI(weth, _swap(token1, weth, amount1, address(this)).add(amount0));
        } else if (token1 == weth) { // eg. USDT - ETH
            sushiOut = _toSUSHI(weth, _swap(token0, weth, amount0, address(this)).add(amount1));
        } else { // eg. MIC - USDT
            address bridge0 = bridgeFor(token0);
            address bridge1 = bridgeFor(token1);
            if (bridge0 == token1) { // eg. MIC - USDT - and bridgeFor(MIC) = USDT
                sushiOut = _convertStep(bridge0, token1,
                    _swap(token0, bridge0, amount0, address(this)),
                    amount1
                );
            } else if (bridge1 == token0) { // eg. WBTC - DSD - and bridgeFor(DSD) = WBTC
                sushiOut = _convertStep(token0, bridge1,
                    amount0,
                    _swap(token1, bridge1, amount1, address(this))
                );
            } else {
                sushiOut = _convertStep(bridge0, bridge1, // eg. USDT - DSD - and bridgeFor(DSD) = WBTC
                    _swap(token0, bridge0, amount0, address(this)),
                    _swap(token1, bridge1, amount1, address(this))
                );
            }
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-_swap-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': '_swap', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'fromToken', 'type': 'address'}, {'name': 'toToken', 'type': 'address'}, {'name': 'amountIn', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}], 'returns': [{'name': 'amountOut', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SushiMaker: Cannot convert'], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '170#191'}"}
函数切片:
    function _swap(address fromToken, address toToken, uint256 amountIn, address to) internal returns (uint256 amountOut) {
        // Checks
        // X1 - X5: OK
        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(fromToken, toToken));
        require(address(pair) != address(0), "SushiMaker: Cannot convert");

        // Interactions
        // X1 - X5: OK
        (uint256 reserve0, uint256 reserve1,) = pair.getReserves();
        uint256 amountInWithFee = amountIn.mul(997);
        if (fromToken == pair.token0()) {
            amountOut = amountIn.mul(997).mul(reserve1) / reserve0.mul(1000).add(amountInWithFee);
            IERC20(fromToken).safeTransfer(address(pair), amountIn);
            pair.swap(0, amountOut, to, new bytes(0));
            // TODO: Add maximum slippage?
        } else {
            amountOut = amountIn.mul(997).mul(reserve0) / reserve1.mul(1000).add(amountInWithFee);
            IERC20(fromToken).safeTransfer(address(pair), amountIn);
            pair.swap(amountOut, 0, to, new bytes(0));
            // TODO: Add maximum slippage?
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMaker.sol-_toSUSHI-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMaker.sol', 'is_fault': False, 'message': "{'name': '_toSUSHI', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'amountIn', 'type': 'uint256'}], 'returns': [{'name': 'amountOut', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMaker.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'bar'], 'written': []}, 'src': '195#198'}"}
函数切片:
    function _toSUSHI(address token, uint256 amountIn) internal returns(uint256 amountOut) {
        // X1 - X5: OK
        amountOut = _swap(token, sushi, amountIn, bar);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiMakerExploitMock.sol-constructor-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMakerExploitMock.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_sushiMaker', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMakerExploitMock.sol', 'external_calls': [], 'state_vars': {'read': ['sushiMaker'], 'written': []}, 'src': '9#11'}"}
函数切片:
    constructor (address _sushiMaker) public{
        sushiMaker = SushiMaker(_sushiMaker);
    } 
------------------------------------------------
函数切片ID: SushiSwap-SushiMakerExploitMock.sol-convert-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiMakerExploitMock.sol', 'is_fault': False, 'message': "{'name': 'convert', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token0', 'type': 'address'}, {'name': 'token1', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiMakerExploitMock.sol', 'external_calls': [], 'state_vars': {'read': ['sushiMaker'], 'written': []}, 'src': '12#14'}"}
函数切片:
    function convert(address token0, address token1) external {
        sushiMaker.convert(token0, token1);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-mint-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'mint', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_to', 'type': 'address'}, {'name': '_amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['_delegates'], 'written': []}, 'src': '12#15'}"}
函数切片:
    function mint(address _to, uint256 _amount) public onlyOwner {
        _mint(_to, _amount);
        _moveDelegates(address(0), _delegates[_to], _amount);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-delegates-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'delegates', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'delegator', 'type': 'address'}], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['_delegates'], 'written': []}, 'src': '57#63'}"}
函数切片:
    function delegates(address delegator)
        external
        view
        returns (address)
    {
        return _delegates[delegator];
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-delegate-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'delegate', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'delegatee', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '69#71'}"}
函数切片:
    function delegate(address delegatee) external {
        return _delegate(msg.sender, delegatee);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-delegateBySig-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'delegateBySig', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'delegatee', 'type': 'address'}, {'name': 'nonce', 'type': 'uint256'}, {'name': 'expiry', 'type': 'uint256'}, {'name': 'v', 'type': 'uint8'}, {'name': 'r', 'type': 'bytes32'}, {'name': 's', 'type': 'bytes32'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SUSHI::delegateBySig: invalid signature', 'SUSHI::delegateBySig: invalid nonce', 'SUSHI::delegateBySig: signature expired'], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['DOMAIN_TYPEHASH', 'DELEGATION_TYPEHASH', 'nonces'], 'written': []}, 'src': '82#123'}"}
函数切片:
    function delegateBySig(
        address delegatee,
        uint nonce,
        uint expiry,
        uint8 v,
        bytes32 r,
        bytes32 s
    )
        external
    {
        bytes32 domainSeparator = keccak256(
            abi.encode(
                DOMAIN_TYPEHASH,
                keccak256(bytes(name())),
                getChainId(),
                address(this)
            )
        );

        bytes32 structHash = keccak256(
            abi.encode(
                DELEGATION_TYPEHASH,
                delegatee,
                nonce,
                expiry
            )
        );

        bytes32 digest = keccak256(
            abi.encodePacked(
                "\x19\x01",
                domainSeparator,
                structHash
            )
        );

        address signatory = ecrecover(digest, v, r, s);
        require(signatory != address(0), "SUSHI::delegateBySig: invalid signature");
        require(nonce == nonces[signatory]++, "SUSHI::delegateBySig: invalid nonce");
        require(now <= expiry, "SUSHI::delegateBySig: signature expired");
        return _delegate(signatory, delegatee);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-getCurrentVotes-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'getCurrentVotes', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['numCheckpoints', 'checkpoints'], 'written': []}, 'src': '130#137'}"}
函数切片:
    function getCurrentVotes(address account)
        external
        view
        returns (uint256)
    {
        uint32 nCheckpoints = numCheckpoints[account];
        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-getPriorVotes-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'getPriorVotes', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'account', 'type': 'address'}, {'name': 'blockNumber', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SUSHI::getPriorVotes: not yet determined'], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['numCheckpoints', 'checkpoints', 'checkpoints', 'checkpoints', 'checkpoints', 'checkpoints'], 'written': []}, 'src': '146#182'}"}
函数切片:
    function getPriorVotes(address account, uint blockNumber)
        external
        view
        returns (uint256)
    {
        require(blockNumber < block.number, "SUSHI::getPriorVotes: not yet determined");

        uint32 nCheckpoints = numCheckpoints[account];
        if (nCheckpoints == 0) {
            return 0;
        }

        // First check most recent balance
        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {
            return checkpoints[account][nCheckpoints - 1].votes;
        }

        // Next check implicit zero balance
        if (checkpoints[account][0].fromBlock > blockNumber) {
            return 0;
        }

        uint32 lower = 0;
        uint32 upper = nCheckpoints - 1;
        while (upper > lower) {
            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow
            Checkpoint memory cp = checkpoints[account][center];
            if (cp.fromBlock == blockNumber) {
                return cp.votes;
            } else if (cp.fromBlock < blockNumber) {
                lower = center;
            } else {
                upper = center - 1;
            }
        }
        return checkpoints[account][lower].votes;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-_delegate-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': '_delegate', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'delegator', 'type': 'address'}, {'name': 'delegatee', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['DelegateChanged'], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['_delegates', '_delegates'], 'written': []}, 'src': '184#194'}"}
函数切片:
    function _delegate(address delegator, address delegatee)
        internal
    {
        address currentDelegate = _delegates[delegator];
        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying SUSHIs (not scaled);
        _delegates[delegator] = delegatee;

        emit DelegateChanged(delegator, currentDelegate, delegatee);

        _moveDelegates(currentDelegate, delegatee, delegatorBalance);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-_moveDelegates-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': '_moveDelegates', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'srcRep', 'type': 'address'}, {'name': 'dstRep', 'type': 'address'}, {'name': 'amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['numCheckpoints', 'checkpoints', 'numCheckpoints', 'checkpoints'], 'written': []}, 'src': '196#214'}"}
函数切片:
    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {
        if (srcRep != dstRep && amount > 0) {
            if (srcRep != address(0)) {
                // decrease old representative
                uint32 srcRepNum = numCheckpoints[srcRep];
                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;
                uint256 srcRepNew = srcRepOld.sub(amount);
                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);
            }

            if (dstRep != address(0)) {
                // increase new representative
                uint32 dstRepNum = numCheckpoints[dstRep];
                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;
                uint256 dstRepNew = dstRepOld.add(amount);
                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);
            }
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-_writeCheckpoint-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': '_writeCheckpoint', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'delegatee', 'type': 'address'}, {'name': 'nCheckpoints', 'type': 'uint32'}, {'name': 'oldVotes', 'type': 'uint256'}, {'name': 'newVotes', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['DelegateVotesChanged'], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': ['checkpoints', 'checkpoints', 'numCheckpoints', 'checkpoints'], 'written': []}, 'src': '216#234'}"}
函数切片:
    function _writeCheckpoint(
        address delegatee,
        uint32 nCheckpoints,
        uint256 oldVotes,
        uint256 newVotes
    )
        internal
    {
        uint32 blockNumber = safe32(block.number, "SUSHI::_writeCheckpoint: block number exceeds 32 bits");

        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
        } else {
            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
            numCheckpoints[delegatee] = nCheckpoints + 1;
        }

        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-safe32-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'safe32', 'visibility': 'internal', 'stateMutability': 'pure', 'parameters': [{'name': 'n', 'type': 'uint256'}, {'name': 'errorMessage', 'type': 'string'}], 'returns': [{'name': '', 'type': 'uint32'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '236#239'}"}
函数切片:
    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {
        require(n < 2**32, errorMessage);
        return uint32(n);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiToken.sol-getChainId-10
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiToken.sol', 'is_fault': False, 'message': "{'name': 'getChainId', 'visibility': 'internal', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiToken.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '241#245'}"}
函数切片:
    function getChainId() internal pure returns (uint) {
        uint256 chainId;
        assembly { chainId := chainid() }
        return chainId;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiBar.sol-constructor-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiBar.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_sushi', 'type': 'contract IERC20'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiBar.sol', 'external_calls': [], 'state_vars': {'read': ['sushi'], 'written': []}, 'src': '17#19'}"}
函数切片:
    constructor(IERC20 _sushi) public {
        sushi = _sushi;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiBar.sol-enter-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiBar.sol', 'is_fault': False, 'message': "{'name': 'enter', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiBar.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'sushi'], 'written': []}, 'src': '23#39'}"}
函数切片:
    function enter(uint256 _amount) public {
        // Gets the amount of Sushi locked in the contract
        uint256 totalSushi = sushi.balanceOf(address(this));
        // Gets the amount of xSushi in existence
        uint256 totalShares = totalSupply();
        // If no xSushi exists, mint it 1:1 to the amount put in
        if (totalShares == 0 || totalSushi == 0) {
            _mint(msg.sender, _amount);
        } 
        // Calculate and mint the amount of xSushi the Sushi is worth. The ratio will change overtime, as xSushi is burned/minted and Sushi deposited + gained from fees / withdrawn.
        else {
            uint256 what = _amount.mul(totalShares).div(totalSushi);
            _mint(msg.sender, what);
        }
        // Lock the Sushi in the contract
        sushi.transferFrom(msg.sender, address(this), _amount);
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiBar.sol-leave-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiBar.sol', 'is_fault': False, 'message': "{'name': 'leave', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_share', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiBar.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'sushi'], 'written': []}, 'src': '43#50'}"}
函数切片:
    function leave(uint256 _share) public {
        // Gets the amount of xSushi in existence
        uint256 totalShares = totalSupply();
        // Calculates the amount of Sushi the xSushi is worth
        uint256 what = _share.mul(sushi.balanceOf(address(this))).div(totalShares);
        _burn(msg.sender, _share);
        sushi.transfer(msg.sender, what);
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-migrate-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'migrate', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}], 'returns': [{'name': '', 'type': 'contract IERC20'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '23#23'}"}
函数切片:
    function migrate(IERC20 token) external returns (IERC20);
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-constructor-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_sushi', 'type': 'contract SushiToken'}, {'name': '_devaddr', 'type': 'address'}, {'name': '_sushiPerBlock', 'type': 'uint256'}, {'name': '_startBlock', 'type': 'uint256'}, {'name': '_bonusEndBlock', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'devaddr', 'sushiPerBlock', 'bonusEndBlock', 'startBlock'], 'written': []}, 'src': '88#100'}"}
函数切片:
    constructor(
        SushiToken _sushi,
        address _devaddr,
        uint256 _sushiPerBlock,
        uint256 _startBlock,
        uint256 _bonusEndBlock
    ) public {
        sushi = _sushi;
        devaddr = _devaddr;
        sushiPerBlock = _sushiPerBlock;
        bonusEndBlock = _bonusEndBlock;
        startBlock = _startBlock;
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-poolLength-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'poolLength', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo'], 'written': []}, 'src': '102#104'}"}
函数切片:
    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-add-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'add', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_allocPoint', 'type': 'uint256'}, {'name': '_lpToken', 'type': 'contract IERC20'}, {'name': '_withUpdate', 'type': 'bool'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['startBlock', 'startBlock', 'totalAllocPoint', 'totalAllocPoint', 'poolInfo'], 'written': []}, 'src': '108#120'}"}
函数切片:
    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {
        if (_withUpdate) {
            massUpdatePools();
        }
        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        poolInfo.push(PoolInfo({
            lpToken: _lpToken,
            allocPoint: _allocPoint,
            lastRewardBlock: lastRewardBlock,
            accSushiPerShare: 0
        }));
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-set-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'set', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_pid', 'type': 'uint256'}, {'name': '_allocPoint', 'type': 'uint256'}, {'name': '_withUpdate', 'type': 'bool'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['totalAllocPoint', 'poolInfo', 'totalAllocPoint', 'poolInfo'], 'written': []}, 'src': '123#129'}"}
函数切片:
    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {
        if (_withUpdate) {
            massUpdatePools();
        }
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint;
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-setMigrator-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'setMigrator', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_migrator', 'type': 'contract IMigratorChef'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['migrator'], 'written': []}, 'src': '132#134'}"}
函数切片:
    function setMigrator(IMigratorChef _migrator) public onlyOwner {
        migrator = _migrator;
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-migrate-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'migrate', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_pid', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['migrate: no migrator', 'migrate: bad'], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['migrator', 'poolInfo', 'migrator', 'migrator'], 'written': []}, 'src': '137#146'}"}
函数切片:
    function migrate(uint256 _pid) public {
        require(address(migrator) != address(0), "migrate: no migrator");
        PoolInfo storage pool = poolInfo[_pid];
        IERC20 lpToken = pool.lpToken;
        uint256 bal = lpToken.balanceOf(address(this));
        lpToken.safeApprove(address(migrator), bal);
        IERC20 newLpToken = migrator.migrate(lpToken);
        require(bal == newLpToken.balanceOf(address(this)), "migrate: bad");
        pool.lpToken = newLpToken;
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-getMultiplier-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'getMultiplier', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': '_from', 'type': 'uint256'}, {'name': '_to', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['bonusEndBlock', 'bonusEndBlock', 'bonusEndBlock', 'BONUS_MULTIPLIER', 'bonusEndBlock', 'BONUS_MULTIPLIER'], 'written': []}, 'src': '149#159'}"}
函数切片:
    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {
        if (_to <= bonusEndBlock) {
            return _to.sub(_from).mul(BONUS_MULTIPLIER);
        } else if (_from >= bonusEndBlock) {
            return _to.sub(_from);
        } else {
            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(
                _to.sub(bonusEndBlock)
            );
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-pendingSushi-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'pendingSushi', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': '_pid', 'type': 'uint256'}, {'name': '_user', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo', 'userInfo', 'totalAllocPoint', 'sushiPerBlock'], 'written': []}, 'src': '162#173'}"}
函数切片:
    function pendingSushi(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accSushiPerShare = pool.accSushiPerShare;
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (block.number > pool.lastRewardBlock && lpSupply != 0) {
            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
            uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));
        }
        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.rewardDebt);
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-massUpdatePools-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'massUpdatePools', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo'], 'written': []}, 'src': '176#181'}"}
函数切片:
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-updatePool-10
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'updatePool', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_pid', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo', 'totalAllocPoint', 'sushiPerBlock', 'devaddr', 'sushi', 'sushi'], 'written': []}, 'src': '184#200'}"}
函数切片:
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);
        uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);
        sushi.mint(devaddr, sushiReward.div(10));
        sushi.mint(address(this), sushiReward);
        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));
        pool.lastRewardBlock = block.number;
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-deposit-11
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'deposit', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_pid', 'type': 'uint256'}, {'name': '_amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Deposit'], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo', 'userInfo'], 'written': []}, 'src': '203#219'}"}
函数切片:
    function deposit(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);
            if(pending > 0) {
                safeSushiTransfer(msg.sender, pending);
            }
        }
        if(_amount > 0) {
            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
            user.amount = user.amount.add(_amount);
        }
        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);
        emit Deposit(msg.sender, _pid, _amount);
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-withdraw-12
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'withdraw', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_pid', 'type': 'uint256'}, {'name': '_amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Withdraw'], 'errors': ['withdraw: not good'], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo', 'userInfo'], 'written': []}, 'src': '222#237'}"}
函数切片:
    function withdraw(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "withdraw: not good");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);
        if(pending > 0) {
            safeSushiTransfer(msg.sender, pending);
        }
        if(_amount > 0) {
            user.amount = user.amount.sub(_amount);
            pool.lpToken.safeTransfer(address(msg.sender), _amount);
        }
        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);
        emit Withdraw(msg.sender, _pid, _amount);
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-emergencyWithdraw-13
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'emergencyWithdraw', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_pid', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['EmergencyWithdraw'], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['poolInfo', 'userInfo'], 'written': []}, 'src': '240#248'}"}
函数切片:
    function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        uint256 amount = user.amount;
        user.amount = 0;
        user.rewardDebt = 0;
        pool.lpToken.safeTransfer(address(msg.sender), amount);
        emit EmergencyWithdraw(msg.sender, _pid, amount);
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-safeSushiTransfer-14
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'safeSushiTransfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_to', 'type': 'address'}, {'name': '_amount', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['sushi', 'sushi', 'sushi'], 'written': []}, 'src': '251#258'}"}
函数切片:
    function safeSushiTransfer(address _to, uint256 _amount) internal {
        uint256 sushiBal = sushi.balanceOf(address(this));
        if (_amount > sushiBal) {
            sushi.transfer(_to, sushiBal);
        } else {
            sushi.transfer(_to, _amount);
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-MasterChef.sol-dev-15
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-MasterChef.sol', 'is_fault': False, 'message': "{'name': 'dev', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_devaddr', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['dev: wut?'], 'contract': 'SushiSwap-MasterChef.sol', 'external_calls': [], 'state_vars': {'read': ['devaddr', 'devaddr'], 'written': []}, 'src': '261#264'}"}
函数切片:
    function dev(address _devaddr) public {
        require(msg.sender == devaddr, "dev: wut?");
        devaddr = _devaddr;
    }
------------------------------------------------
函数切片ID: SushiSwap-TransferHelper.sol-safeApprove-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-TransferHelper.sol', 'is_fault': False, 'message': "{'name': 'safeApprove', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['TransferHelper: APPROVE_FAILED'], 'contract': 'SushiSwap-TransferHelper.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '7#11'}"}
函数切片:
    function safeApprove(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('approve(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }
------------------------------------------------
函数切片ID: SushiSwap-TransferHelper.sol-safeTransfer-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-TransferHelper.sol', 'is_fault': False, 'message': "{'name': 'safeTransfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['TransferHelper: TRANSFER_FAILED'], 'contract': 'SushiSwap-TransferHelper.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '13#17'}"}
函数切片:
    function safeTransfer(address token, address to, uint value) internal {
        // bytes4(keccak256(bytes('transfer(address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }
------------------------------------------------
函数切片ID: SushiSwap-TransferHelper.sol-safeTransferFrom-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-TransferHelper.sol', 'is_fault': False, 'message': "{'name': 'safeTransferFrom', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'from', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['TransferHelper: TRANSFER_FROM_FAILED'], 'contract': 'SushiSwap-TransferHelper.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '19#23'}"}
函数切片:
    function safeTransferFrom(address token, address from, address to, uint value) internal {
        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }
------------------------------------------------
函数切片ID: SushiSwap-TransferHelper.sol-safeTransferETH-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-TransferHelper.sol', 'is_fault': False, 'message': "{'name': 'safeTransferETH', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['TransferHelper: ETH_TRANSFER_FAILED'], 'contract': 'SushiSwap-TransferHelper.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '25#28'}"}
函数切片:
    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
------------------------------------------------
函数切片ID: SushiSwap-SafeERC20.sol-safeTransfer-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeTransfer', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '22#24'}"}
函数切片:
    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }
------------------------------------------------
函数切片ID: SushiSwap-SafeERC20.sol-safeTransferFrom-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeTransferFrom', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'from', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '26#28'}"}
函数切片:
    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }
------------------------------------------------
函数切片ID: SushiSwap-SafeERC20.sol-safeApprove-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeApprove', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SafeERC20: approve from non-zero to non-zero allowance'], 'contract': 'SushiSwap-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '37#46'}"}
函数切片:
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        // safeApprove should only be called when setting an initial allowance,
        // or when resetting it to zero. To increase and decrease it, use
        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
        // solhint-disable-next-line max-line-length
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }
------------------------------------------------
函数切片ID: SushiSwap-SafeERC20.sol-safeIncreaseAllowance-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeIncreaseAllowance', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '48#51'}"}
函数切片:
    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
------------------------------------------------
函数切片ID: SushiSwap-SafeERC20.sol-safeDecreaseAllowance-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SafeERC20.sol', 'is_fault': False, 'message': "{'name': 'safeDecreaseAllowance', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '53#56'}"}
函数切片:
    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }
------------------------------------------------
函数切片ID: SushiSwap-SafeERC20.sol-_callOptionalReturn-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SafeERC20.sol', 'is_fault': False, 'message': "{'name': '_callOptionalReturn', 'visibility': 'private', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'contract IERC20'}, {'name': 'data', 'type': 'bytes'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['SafeERC20: ERC20 operation did not succeed'], 'contract': 'SushiSwap-SafeERC20.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '64#74'}"}
函数切片:
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since
        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that
        // the target address contains contract code and also asserts for success in the low-level call.

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { // Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-name-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'name', 'visibility': 'external', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'string'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '9#9'}"}
函数切片:
    function name() external pure returns (string memory);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-symbol-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'symbol', 'visibility': 'external', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'string'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '10#10'}"}
函数切片:
    function symbol() external pure returns (string memory);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-decimals-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'decimals', 'visibility': 'external', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'uint8'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '11#11'}"}
函数切片:
    function decimals() external pure returns (uint8);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-totalSupply-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'totalSupply', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '12#12'}"}
函数切片:
    function totalSupply() external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-balanceOf-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'balanceOf', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'owner', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '13#13'}"}
函数切片:
    function balanceOf(address owner) external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-allowance-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'allowance', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '14#14'}"}
函数切片:
    function allowance(address owner, address spender) external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-approve-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'approve', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '16#16'}"}
函数切片:
    function approve(address spender, uint value) external returns (bool);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-transfer-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'transfer', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '17#17'}"}
函数切片:
    function transfer(address to, uint value) external returns (bool);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-transferFrom-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'transferFrom', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'from', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [{'name': '', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '18#18'}"}
函数切片:
    function transferFrom(address from, address to, uint value) external returns (bool);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-DOMAIN_SEPARATOR-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'DOMAIN_SEPARATOR', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'bytes32'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '20#20'}"}
函数切片:
    function DOMAIN_SEPARATOR() external view returns (bytes32);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-PERMIT_TYPEHASH-10
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'PERMIT_TYPEHASH', 'visibility': 'external', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'bytes32'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '21#21'}"}
函数切片:
    function PERMIT_TYPEHASH() external pure returns (bytes32);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-nonces-11
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'nonces', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'owner', 'type': 'address'}], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '22#22'}"}
函数切片:
    function nonces(address owner) external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-permit-12
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'permit', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'owner', 'type': 'address'}, {'name': 'spender', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}, {'name': 'deadline', 'type': 'uint256'}, {'name': 'v', 'type': 'uint8'}, {'name': 'r', 'type': 'bytes32'}, {'name': 's', 'type': 'bytes32'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '24#24'}"}
函数切片:
    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-MINIMUM_LIQUIDITY-13
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'MINIMUM_LIQUIDITY', 'visibility': 'external', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '38#38'}"}
函数切片:
    function MINIMUM_LIQUIDITY() external pure returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-factory-14
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'factory', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '39#39'}"}
函数切片:
    function factory() external view returns (address);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-token0-15
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'token0', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '40#40'}"}
函数切片:
    function token0() external view returns (address);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-token1-16
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'token1', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '41#41'}"}
函数切片:
    function token1() external view returns (address);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-getReserves-17
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'getReserves', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': 'reserve0', 'type': 'uint112'}, {'name': 'reserve1', 'type': 'uint112'}, {'name': 'blockTimestampLast', 'type': 'uint32'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '42#42'}"}
函数切片:
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-price0CumulativeLast-18
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'price0CumulativeLast', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '43#43'}"}
函数切片:
    function price0CumulativeLast() external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-price1CumulativeLast-19
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'price1CumulativeLast', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '44#44'}"}
函数切片:
    function price1CumulativeLast() external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-kLast-20
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'kLast', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '45#45'}"}
函数切片:
    function kLast() external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-mint-21
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'mint', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}], 'returns': [{'name': 'liquidity', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '47#47'}"}
函数切片:
    function mint(address to) external returns (uint liquidity);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-burn-22
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'burn', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}], 'returns': [{'name': 'amount0', 'type': 'uint256'}, {'name': 'amount1', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '48#48'}"}
函数切片:
    function burn(address to) external returns (uint amount0, uint amount1);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-swap-23
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'swap', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amount0Out', 'type': 'uint256'}, {'name': 'amount1Out', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '49#49'}"}
函数切片:
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-skim-24
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'skim', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '50#50'}"}
函数切片:
    function skim(address to) external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-sync-25
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'sync', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '51#51'}"}
函数切片:
    function sync() external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Pair.sol-initialize-26
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'initialize', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '', 'type': 'address'}, {'name': '', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '53#53'}"}
函数切片:
    function initialize(address, address) external;
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-desiredLiquidity-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'desiredLiquidity', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '15#15'}"}
函数切片:
    function desiredLiquidity() external view returns (uint256);
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-lock-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'lock', 'type': 'modifier', 'contract': 'SushiSwap-UniswapV2Pair.sol', 'src': '38#43'}"}
函数切片:
    modifier lock() {
        require(unlocked == 1, 'UniswapV2: LOCKED');
        unlocked = 0;
        _;
        unlocked = 1;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-getReserves-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'getReserves', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '_reserve0', 'type': 'uint112'}, {'name': '_reserve1', 'type': 'uint112'}, {'name': '_blockTimestampLast', 'type': 'uint32'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['reserve0', 'reserve1', 'blockTimestampLast'], 'written': []}, 'src': '45#49'}"}
函数切片:
    function getReserves() public view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {
        _reserve0 = reserve0;
        _reserve1 = reserve1;
        _blockTimestampLast = blockTimestampLast;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-_safeTransfer-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': '_safeTransfer', 'visibility': 'private', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'to', 'type': 'address'}, {'name': 'value', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2: TRANSFER_FAILED'], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['SELECTOR'], 'written': []}, 'src': '51#54'}"}
函数切片:
    function _safeTransfer(address token, address to, uint value) private {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-constructor-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '68#70'}"}
函数切片:
    constructor() public {
        factory = msg.sender;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-initialize-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'initialize', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_token0', 'type': 'address'}, {'name': '_token1', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2: FORBIDDEN'], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'token0', 'token1'], 'written': []}, 'src': '73#77'}"}
函数切片:
    function initialize(address _token0, address _token1) external {
        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check
        token0 = _token0;
        token1 = _token1;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-_update-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': '_update', 'visibility': 'private', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'balance0', 'type': 'uint256'}, {'name': 'balance1', 'type': 'uint256'}, {'name': '_reserve0', 'type': 'uint112'}, {'name': '_reserve1', 'type': 'uint112'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Sync'], 'errors': ['UniswapV2: OVERFLOW'], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['blockTimestampLast', 'price0CumulativeLast', 'price1CumulativeLast', 'reserve0', 'reserve1', 'blockTimestampLast', 'reserve0', 'reserve1'], 'written': []}, 'src': '80#93'}"}
函数切片:
    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {
        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');
        uint32 blockTimestamp = uint32(block.timestamp % 2**32);
        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired
        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {
            // * never overflows, and + overflow is desired
            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;
            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;
        }
        reserve0 = uint112(balance0);
        reserve1 = uint112(balance1);
        blockTimestampLast = blockTimestamp;
        emit Sync(reserve0, reserve1);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-_mintFee-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': '_mintFee', 'visibility': 'private', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_reserve0', 'type': 'uint112'}, {'name': '_reserve1', 'type': 'uint112'}], 'returns': [{'name': 'feeOn', 'type': 'bool'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'kLast', 'kLast'], 'written': []}, 'src': '96#114'}"}
函数切片:
    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {
        address feeTo = IUniswapV2Factory(factory).feeTo();
        feeOn = feeTo != address(0);
        uint _kLast = kLast; // gas savings
        if (feeOn) {
            if (_kLast != 0) {
                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));
                uint rootKLast = Math.sqrt(_kLast);
                if (rootK > rootKLast) {
                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));
                    uint denominator = rootK.mul(5).add(rootKLast);
                    uint liquidity = numerator / denominator;
                    if (liquidity > 0) _mint(feeTo, liquidity);
                }
            }
        } else if (_kLast != 0) {
            kLast = 0;
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-mint-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'mint', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}], 'returns': [{'name': 'liquidity', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Mint'], 'errors': ['Must not have migrator', 'Bad desired liquidity', 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED'], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['token0', 'token1', 'factory', 'MINIMUM_LIQUIDITY', 'MINIMUM_LIQUIDITY', 'kLast', 'reserve1', 'reserve0'], 'written': []}, 'src': '117#145'}"}
函数切片:
    function mint(address to) external lock returns (uint liquidity) {
        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
        uint balance0 = IERC20Uniswap(token0).balanceOf(address(this));
        uint balance1 = IERC20Uniswap(token1).balanceOf(address(this));
        uint amount0 = balance0.sub(_reserve0);
        uint amount1 = balance1.sub(_reserve1);

        bool feeOn = _mintFee(_reserve0, _reserve1);
        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
        if (_totalSupply == 0) {
            address migrator = IUniswapV2Factory(factory).migrator();
            if (msg.sender == migrator) {
                liquidity = IMigrator(migrator).desiredLiquidity();
                require(liquidity > 0 && liquidity != uint256(-1), "Bad desired liquidity");
            } else {
                require(migrator == address(0), "Must not have migrator");
                liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);
                _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens
            }
        } else {
            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);
        }
        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');
        _mint(to, liquidity);

        _update(balance0, balance1, _reserve0, _reserve1);
        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
        emit Mint(msg.sender, amount0, amount1);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-burn-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'burn', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}], 'returns': [{'name': 'amount0', 'type': 'uint256'}, {'name': 'amount1', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Burn'], 'errors': ['UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED'], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['token0', 'token1', 'kLast', 'reserve1', 'reserve0'], 'written': []}, 'src': '148#170'}"}
函数切片:
    function burn(address to) external lock returns (uint amount0, uint amount1) {
        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
        address _token0 = token0;                                // gas savings
        address _token1 = token1;                                // gas savings
        uint balance0 = IERC20Uniswap(_token0).balanceOf(address(this));
        uint balance1 = IERC20Uniswap(_token1).balanceOf(address(this));
        uint liquidity = balanceOf[address(this)];

        bool feeOn = _mintFee(_reserve0, _reserve1);
        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee
        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution
        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution
        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');
        _burn(address(this), liquidity);
        _safeTransfer(_token0, to, amount0);
        _safeTransfer(_token1, to, amount1);
        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));
        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));

        _update(balance0, balance1, _reserve0, _reserve1);
        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date
        emit Burn(msg.sender, amount0, amount1, to);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-swap-10
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'swap', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amount0Out', 'type': 'uint256'}, {'name': 'amount1Out', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'data', 'type': 'bytes'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': ['Swap'], 'errors': ['UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT', 'UniswapV2: INSUFFICIENT_LIQUIDITY', 'UniswapV2: INVALID_TO', 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT', 'UniswapV2: K'], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['token0', 'token1'], 'written': []}, 'src': '173#201'}"}
函数切片:
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {
        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');
        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings
        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');

        uint balance0;
        uint balance1;
        { // scope for _token{0,1}, avoids stack too deep errors
        address _token0 = token0;
        address _token1 = token1;
        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');
        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens
        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens
        if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);
        balance0 = IERC20Uniswap(_token0).balanceOf(address(this));
        balance1 = IERC20Uniswap(_token1).balanceOf(address(this));
        }
        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;
        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;
        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');
        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors
        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));
        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));
        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');
        }

        _update(balance0, balance1, _reserve0, _reserve1);
        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-skim-11
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'skim', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'to', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['token0', 'token1', 'reserve0', 'reserve1'], 'written': []}, 'src': '204#209'}"}
函数切片:
    function skim(address to) external lock {
        address _token0 = token0; // gas savings
        address _token1 = token1; // gas savings
        _safeTransfer(_token0, to, IERC20Uniswap(_token0).balanceOf(address(this)).sub(reserve0));
        _safeTransfer(_token1, to, IERC20Uniswap(_token1).balanceOf(address(this)).sub(reserve1));
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Pair.sol-sync-12
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Pair.sol', 'is_fault': False, 'message': "{'name': 'sync', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Pair.sol', 'external_calls': [], 'state_vars': {'read': ['token0', 'token1', 'reserve0', 'reserve1'], 'written': []}, 'src': '212#214'}"}
函数切片:
    function sync() external lock {
        _update(IERC20Uniswap(token0).balanceOf(address(this)), IERC20Uniswap(token1).balanceOf(address(this)), reserve0, reserve1);
    }
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Router02.sol-removeLiquidityETHSupportingFeeOnTransferTokens-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amountETH', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '8#15'}"}
函数切片:
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external returns (uint amountETH);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Router02.sol-removeLiquidityETHWithPermitSupportingFeeOnTransferTokens-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}, {'name': 'approveMax', 'type': 'bool'}, {'name': 'v', 'type': 'uint8'}, {'name': 'r', 'type': 'bytes32'}, {'name': 's', 'type': 'bytes32'}], 'returns': [{'name': 'amountETH', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '16#24'}"}
函数切片:
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external returns (uint amountETH);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Router02.sol-swapExactTokensForTokensSupportingFeeOnTransferTokens-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '26#32'}"}
函数切片:
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Router02.sol-swapExactETHForTokensSupportingFeeOnTransferTokens-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'payable', 'parameters': [{'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '33#38'}"}
函数切片:
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external payable;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Router02.sol-swapExactTokensForETHSupportingFeeOnTransferTokens-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '39#45'}"}
函数切片:
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-ensure-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'ensure', 'type': 'modifier', 'contract': 'SushiSwap-UniswapV2Router02.sol', 'src': '20#23'}"}
函数切片:
    modifier ensure(uint deadline) {
        require(deadline >= block.timestamp, 'UniswapV2Router: EXPIRED');
        _;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-constructor-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_factory', 'type': 'address'}, {'name': '_WETH', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'WETH'], 'written': []}, 'src': '25#28'}"}
函数切片:
    constructor(address _factory, address _WETH) public {
        factory = _factory;
        WETH = _WETH;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-constructor-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'external', 'stateMutability': 'payable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH'], 'written': []}, 'src': '30#32'}"}
函数切片:
    receive() external payable {
        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-_addLiquidity-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': '_addLiquidity', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}, {'name': 'amountADesired', 'type': 'uint256'}, {'name': 'amountBDesired', 'type': 'uint256'}, {'name': 'amountAMin', 'type': 'uint256'}, {'name': 'amountBMin', 'type': 'uint256'}], 'returns': [{'name': 'amountA', 'type': 'uint256'}, {'name': 'amountB', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INSUFFICIENT_A_AMOUNT', 'UniswapV2Router: INSUFFICIENT_B_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'factory', 'factory'], 'written': []}, 'src': '35#62'}"}
函数切片:
    function _addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin
    ) internal virtual returns (uint amountA, uint amountB) {
        // create the pair if it doesn't exist yet
        if (IUniswapV2Factory(factory).getPair(tokenA, tokenB) == address(0)) {
            IUniswapV2Factory(factory).createPair(tokenA, tokenB);
        }
        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(factory, tokenA, tokenB);
        if (reserveA == 0 && reserveB == 0) {
            (amountA, amountB) = (amountADesired, amountBDesired);
        } else {
            uint amountBOptimal = UniswapV2Library.quote(amountADesired, reserveA, reserveB);
            if (amountBOptimal <= amountBDesired) {
                require(amountBOptimal >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');
                (amountA, amountB) = (amountADesired, amountBOptimal);
            } else {
                uint amountAOptimal = UniswapV2Library.quote(amountBDesired, reserveB, reserveA);
                assert(amountAOptimal <= amountADesired);
                require(amountAOptimal >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');
                (amountA, amountB) = (amountAOptimal, amountBDesired);
            }
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-addLiquidity-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'addLiquidity', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}, {'name': 'amountADesired', 'type': 'uint256'}, {'name': 'amountBDesired', 'type': 'uint256'}, {'name': 'amountAMin', 'type': 'uint256'}, {'name': 'amountBMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amountA', 'type': 'uint256'}, {'name': 'amountB', 'type': 'uint256'}, {'name': 'liquidity', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '63#78'}"}
函数切片:
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint amountADesired,
        uint amountBDesired,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) external virtual override ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {
        (amountA, amountB) = _addLiquidity(tokenA, tokenB, amountADesired, amountBDesired, amountAMin, amountBMin);
        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
        TransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA);
        TransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB);
        liquidity = IUniswapV2Pair(pair).mint(to);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-addLiquidityETH-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'addLiquidityETH', 'visibility': 'external', 'stateMutability': 'payable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'amountTokenDesired', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amountToken', 'type': 'uint256'}, {'name': 'amountETH', 'type': 'uint256'}, {'name': 'liquidity', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'factory', 'WETH', 'WETH', 'WETH'], 'written': []}, 'src': '79#102'}"}
函数切片:
    function addLiquidityETH(
        address token,
        uint amountTokenDesired,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) external virtual override payable ensure(deadline) returns (uint amountToken, uint amountETH, uint liquidity) {
        (amountToken, amountETH) = _addLiquidity(
            token,
            WETH,
            amountTokenDesired,
            msg.value,
            amountTokenMin,
            amountETHMin
        );
        address pair = UniswapV2Library.pairFor(factory, token, WETH);
        TransferHelper.safeTransferFrom(token, msg.sender, pair, amountToken);
        IWETH(WETH).deposit{value: amountETH}();
        assert(IWETH(WETH).transfer(pair, amountETH));
        liquidity = IUniswapV2Pair(pair).mint(to);
        // refund dust eth, if any
        if (msg.value > amountETH) TransferHelper.safeTransferETH(msg.sender, msg.value - amountETH);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-removeLiquidity-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidity', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountAMin', 'type': 'uint256'}, {'name': 'amountBMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amountA', 'type': 'uint256'}, {'name': 'amountB', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INSUFFICIENT_A_AMOUNT', 'UniswapV2Router: INSUFFICIENT_B_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '105#121'}"}
函数切片:
    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline
    ) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {
        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
        IUniswapV2Pair(pair).transferFrom(msg.sender, pair, liquidity); // send liquidity to pair
        (uint amount0, uint amount1) = IUniswapV2Pair(pair).burn(to);
        (address token0,) = UniswapV2Library.sortTokens(tokenA, tokenB);
        (amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);
        require(amountA >= amountAMin, 'UniswapV2Router: INSUFFICIENT_A_AMOUNT');
        require(amountB >= amountBMin, 'UniswapV2Router: INSUFFICIENT_B_AMOUNT');
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-removeLiquidityETH-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityETH', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amountToken', 'type': 'uint256'}, {'name': 'amountETH', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'WETH'], 'written': []}, 'src': '122#142'}"}
函数切片:
    function removeLiquidityETH(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) public virtual override ensure(deadline) returns (uint amountToken, uint amountETH) {
        (amountToken, amountETH) = removeLiquidity(
            token,
            WETH,
            liquidity,
            amountTokenMin,
            amountETHMin,
            address(this),
            deadline
        );
        TransferHelper.safeTransfer(token, to, amountToken);
        IWETH(WETH).withdraw(amountETH);
        TransferHelper.safeTransferETH(to, amountETH);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-removeLiquidityWithPermit-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityWithPermit', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountAMin', 'type': 'uint256'}, {'name': 'amountBMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}, {'name': 'approveMax', 'type': 'bool'}, {'name': 'v', 'type': 'uint8'}, {'name': 'r', 'type': 'bytes32'}, {'name': 's', 'type': 'bytes32'}], 'returns': [{'name': 'amountA', 'type': 'uint256'}, {'name': 'amountB', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '143#157'}"}
函数切片:
    function removeLiquidityWithPermit(
        address tokenA,
        address tokenB,
        uint liquidity,
        uint amountAMin,
        uint amountBMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external virtual override returns (uint amountA, uint amountB) {
        address pair = UniswapV2Library.pairFor(factory, tokenA, tokenB);
        uint value = approveMax ? uint(-1) : liquidity;
        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        (amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, deadline);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-removeLiquidityETHWithPermit-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityETHWithPermit', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}, {'name': 'approveMax', 'type': 'bool'}, {'name': 'v', 'type': 'uint8'}, {'name': 'r', 'type': 'bytes32'}, {'name': 's', 'type': 'bytes32'}], 'returns': [{'name': 'amountToken', 'type': 'uint256'}, {'name': 'amountETH', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'WETH'], 'written': []}, 'src': '158#171'}"}
函数切片:
    function removeLiquidityETHWithPermit(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external virtual override returns (uint amountToken, uint amountETH) {
        address pair = UniswapV2Library.pairFor(factory, token, WETH);
        uint value = approveMax ? uint(-1) : liquidity;
        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        (amountToken, amountETH) = removeLiquidityETH(token, liquidity, amountTokenMin, amountETHMin, to, deadline);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-removeLiquidityETHSupportingFeeOnTransferTokens-10
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityETHSupportingFeeOnTransferTokens', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amountETH', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'WETH'], 'written': []}, 'src': '174#194'}"}
函数切片:
    function removeLiquidityETHSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline
    ) public virtual override ensure(deadline) returns (uint amountETH) {
        (, amountETH) = removeLiquidity(
            token,
            WETH,
            liquidity,
            amountTokenMin,
            amountETHMin,
            address(this),
            deadline
        );
        TransferHelper.safeTransfer(token, to, IERC20Uniswap(token).balanceOf(address(this)));
        IWETH(WETH).withdraw(amountETH);
        TransferHelper.safeTransferETH(to, amountETH);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-removeLiquidityETHWithPermitSupportingFeeOnTransferTokens-11
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'removeLiquidityETHWithPermitSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'token', 'type': 'address'}, {'name': 'liquidity', 'type': 'uint256'}, {'name': 'amountTokenMin', 'type': 'uint256'}, {'name': 'amountETHMin', 'type': 'uint256'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}, {'name': 'approveMax', 'type': 'bool'}, {'name': 'v', 'type': 'uint8'}, {'name': 'r', 'type': 'bytes32'}, {'name': 's', 'type': 'bytes32'}], 'returns': [{'name': 'amountETH', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'WETH'], 'written': []}, 'src': '195#210'}"}
函数切片:
    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
        address token,
        uint liquidity,
        uint amountTokenMin,
        uint amountETHMin,
        address to,
        uint deadline,
        bool approveMax, uint8 v, bytes32 r, bytes32 s
    ) external virtual override returns (uint amountETH) {
        address pair = UniswapV2Library.pairFor(factory, token, WETH);
        uint value = approveMax ? uint(-1) : liquidity;
        IUniswapV2Pair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);
        amountETH = removeLiquidityETHSupportingFeeOnTransferTokens(
            token, liquidity, amountTokenMin, amountETHMin, to, deadline
        );
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-_swap-12
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': '_swap', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amounts', 'type': 'uint256[]'}, {'name': 'path', 'type': 'address[]'}, {'name': '_to', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'factory'], 'written': []}, 'src': '214#225'}"}
函数切片:
    function _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {
        for (uint i; i < path.length - 1; i++) {
            (address input, address output) = (path[i], path[i + 1]);
            (address token0,) = UniswapV2Library.sortTokens(input, output);
            uint amountOut = amounts[i + 1];
            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));
            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;
            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output)).swap(
                amount0Out, amount1Out, to, new bytes(0)
            );
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapExactTokensForTokens-13
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactTokensForTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'factory'], 'written': []}, 'src': '226#239'}"}
函数切片:
    function swapExactTokensForTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);
        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, path, to);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapTokensForExactTokens-14
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapTokensForExactTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountOut', 'type': 'uint256'}, {'name': 'amountInMax', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: EXCESSIVE_INPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'factory'], 'written': []}, 'src': '240#253'}"}
函数切片:
    function swapTokensForExactTokens(
        uint amountOut,
        uint amountInMax,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual override ensure(deadline) returns (uint[] memory amounts) {
        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);
        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, path, to);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapExactETHForTokens-15
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactETHForTokens', 'visibility': 'external', 'stateMutability': 'payable', 'parameters': [{'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INVALID_PATH', 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'factory', 'WETH', 'factory', 'WETH'], 'written': []}, 'src': '254#268'}"}
函数切片:
    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        payable
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
        amounts = UniswapV2Library.getAmountsOut(factory, msg.value, path);
        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
        IWETH(WETH).deposit{value: amounts[0]}();
        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
        _swap(amounts, path, to);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapTokensForExactETH-16
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapTokensForExactETH', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountOut', 'type': 'uint256'}, {'name': 'amountInMax', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INVALID_PATH', 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'factory', 'factory', 'WETH'], 'written': []}, 'src': '269#285'}"}
函数切片:
    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);
        require(amounts[0] <= amountInMax, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, path, address(this));
        IWETH(WETH).withdraw(amounts[amounts.length - 1]);
        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapExactTokensForETH-17
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactTokensForETH', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INVALID_PATH', 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'factory', 'factory', 'WETH'], 'written': []}, 'src': '286#302'}"}
函数切片:
    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);
        require(amounts[amounts.length - 1] >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]
        );
        _swap(amounts, path, address(this));
        IWETH(WETH).withdraw(amounts[amounts.length - 1]);
        TransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapETHForExactTokens-18
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapETHForExactTokens', 'visibility': 'external', 'stateMutability': 'payable', 'parameters': [{'name': 'amountOut', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INVALID_PATH', 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'factory', 'WETH', 'factory', 'WETH'], 'written': []}, 'src': '303#319'}"}
函数切片:
    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)
        external
        virtual
        override
        payable
        ensure(deadline)
        returns (uint[] memory amounts)
    {
        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);
        require(amounts[0] <= msg.value, 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT');
        IWETH(WETH).deposit{value: amounts[0]}();
        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amounts[0]));
        _swap(amounts, path, to);
        // refund dust eth, if any
        if (msg.value > amounts[0]) TransferHelper.safeTransferETH(msg.sender, msg.value - amounts[0]);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-_swapSupportingFeeOnTransferTokens-19
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': '_swapSupportingFeeOnTransferTokens', 'visibility': 'internal', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'path', 'type': 'address[]'}, {'name': '_to', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory', 'factory'], 'written': []}, 'src': '323#340'}"}
函数切片:
    function _swapSupportingFeeOnTransferTokens(address[] memory path, address _to) internal virtual {
        for (uint i; i < path.length - 1; i++) {
            (address input, address output) = (path[i], path[i + 1]);
            (address token0,) = UniswapV2Library.sortTokens(input, output);
            IUniswapV2Pair pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output));
            uint amountInput;
            uint amountOutput;
            { // scope to avoid stack too deep errors
            (uint reserve0, uint reserve1,) = pair.getReserves();
            (uint reserveInput, uint reserveOutput) = input == token0 ? (reserve0, reserve1) : (reserve1, reserve0);
            amountInput = IERC20Uniswap(input).balanceOf(address(pair)).sub(reserveInput);
            amountOutput = UniswapV2Library.getAmountOut(amountInput, reserveInput, reserveOutput);
            }
            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));
            address to = i < path.length - 2 ? UniswapV2Library.pairFor(factory, output, path[i + 2]) : _to;
            pair.swap(amount0Out, amount1Out, to, new bytes(0));
        }
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapExactTokensForTokensSupportingFeeOnTransferTokens-20
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactTokensForTokensSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '341#357'}"}
函数切片:
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external virtual override ensure(deadline) {
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn
        );
        uint balanceBefore = IERC20Uniswap(path[path.length - 1]).balanceOf(to);
        _swapSupportingFeeOnTransferTokens(path, to);
        require(
            IERC20Uniswap(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'
        );
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapExactETHForTokensSupportingFeeOnTransferTokens-21
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactETHForTokensSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'payable', 'parameters': [{'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INVALID_PATH', 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'WETH', 'factory', 'WETH'], 'written': []}, 'src': '358#380'}"}
函数切片:
    function swapExactETHForTokensSupportingFeeOnTransferTokens(
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    )
        external
        virtual
        override
        payable
        ensure(deadline)
    {
        require(path[0] == WETH, 'UniswapV2Router: INVALID_PATH');
        uint amountIn = msg.value;
        IWETH(WETH).deposit{value: amountIn}();
        assert(IWETH(WETH).transfer(UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn));
        uint balanceBefore = IERC20Uniswap(path[path.length - 1]).balanceOf(to);
        _swapSupportingFeeOnTransferTokens(path, to);
        require(
            IERC20Uniswap(path[path.length - 1]).balanceOf(to).sub(balanceBefore) >= amountOutMin,
            'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'
        );
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-swapExactTokensForETHSupportingFeeOnTransferTokens-22
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'swapExactTokensForETHSupportingFeeOnTransferTokens', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'amountOutMin', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}, {'name': 'to', 'type': 'address'}, {'name': 'deadline', 'type': 'uint256'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2Router: INVALID_PATH', 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT'], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['WETH', 'factory', 'WETH', 'WETH'], 'written': []}, 'src': '381#402'}"}
函数切片:
    function swapExactTokensForETHSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    )
        external
        virtual
        override
        ensure(deadline)
    {
        require(path[path.length - 1] == WETH, 'UniswapV2Router: INVALID_PATH');
        TransferHelper.safeTransferFrom(
            path[0], msg.sender, UniswapV2Library.pairFor(factory, path[0], path[1]), amountIn
        );
        _swapSupportingFeeOnTransferTokens(path, address(this));
        uint amountOut = IERC20Uniswap(WETH).balanceOf(address(this));
        require(amountOut >= amountOutMin, 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT');
        IWETH(WETH).withdraw(amountOut);
        TransferHelper.safeTransferETH(to, amountOut);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-quote-23
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'quote', 'visibility': 'public', 'stateMutability': 'pure', 'parameters': [{'name': 'amountA', 'type': 'uint256'}, {'name': 'reserveA', 'type': 'uint256'}, {'name': 'reserveB', 'type': 'uint256'}], 'returns': [{'name': 'amountB', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '405#407'}"}
函数切片:
    function quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (uint amountB) {
        return UniswapV2Library.quote(amountA, reserveA, reserveB);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-getAmountOut-24
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'getAmountOut', 'visibility': 'public', 'stateMutability': 'pure', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'reserveIn', 'type': 'uint256'}, {'name': 'reserveOut', 'type': 'uint256'}], 'returns': [{'name': 'amountOut', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '409#417'}"}
函数切片:
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)
        public
        pure
        virtual
        override
        returns (uint amountOut)
    {
        return UniswapV2Library.getAmountOut(amountIn, reserveIn, reserveOut);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-getAmountIn-25
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'getAmountIn', 'visibility': 'public', 'stateMutability': 'pure', 'parameters': [{'name': 'amountOut', 'type': 'uint256'}, {'name': 'reserveIn', 'type': 'uint256'}, {'name': 'reserveOut', 'type': 'uint256'}], 'returns': [{'name': 'amountIn', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '419#427'}"}
函数切片:
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)
        public
        pure
        virtual
        override
        returns (uint amountIn)
    {
        return UniswapV2Library.getAmountIn(amountOut, reserveIn, reserveOut);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-getAmountsOut-26
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'getAmountsOut', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'amountIn', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '429#437'}"}
函数切片:
    function getAmountsOut(uint amountIn, address[] memory path)
        public
        view
        virtual
        override
        returns (uint[] memory amounts)
    {
        return UniswapV2Library.getAmountsOut(factory, amountIn, path);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Router02.sol-getAmountsIn-27
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Router02.sol', 'is_fault': False, 'message': "{'name': 'getAmountsIn', 'visibility': 'public', 'stateMutability': 'view', 'parameters': [{'name': 'amountOut', 'type': 'uint256'}, {'name': 'path', 'type': 'address[]'}], 'returns': [{'name': 'amounts', 'type': 'uint256[]'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Router02.sol', 'external_calls': [], 'state_vars': {'read': ['factory'], 'written': []}, 'src': '439#447'}"}
函数切片:
    function getAmountsIn(uint amountOut, address[] memory path)
        public
        view
        virtual
        override
        returns (uint[] memory amounts)
    {
        return UniswapV2Library.getAmountsIn(factory, amountOut, path);
    }
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-feeTo-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'feeTo', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '8#8'}"}
函数切片:
    function feeTo() external view returns (address);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-feeToSetter-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'feeToSetter', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '9#9'}"}
函数切片:
    function feeToSetter() external view returns (address);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-migrator-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'migrator', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '10#10'}"}
函数切片:
    function migrator() external view returns (address);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-getPair-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'getPair', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}], 'returns': [{'name': 'pair', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '12#12'}"}
函数切片:
    function getPair(address tokenA, address tokenB) external view returns (address pair);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-allPairs-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'allPairs', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [{'name': '', 'type': 'uint256'}], 'returns': [{'name': 'pair', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '13#13'}"}
函数切片:
    function allPairs(uint) external view returns (address pair);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-allPairsLength-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'allPairsLength', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '14#14'}"}
函数切片:
    function allPairsLength() external view returns (uint);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-createPair-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'createPair', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}], 'returns': [{'name': 'pair', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '16#16'}"}
函数切片:
    function createPair(address tokenA, address tokenB) external returns (address pair);
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-setFeeTo-7
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'setFeeTo', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '18#18'}"}
函数切片:
    function setFeeTo(address) external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-setFeeToSetter-8
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'setFeeToSetter', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '19#19'}"}
函数切片:
    function setFeeToSetter(address) external;
------------------------------------------------
函数切片ID: SushiSwap-IUniswapV2Factory.sol-setMigrator-9
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-IUniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'setMigrator', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-IUniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '20#20'}"}
函数切片:
    function setMigrator(address) external;
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-constructor-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_feeToSetter', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': ['feeToSetter'], 'written': []}, 'src': '18#20'}"}
函数切片:
    constructor(address _feeToSetter) public {
        feeToSetter = _feeToSetter;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-allPairsLength-1
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'allPairsLength', 'visibility': 'external', 'stateMutability': 'view', 'parameters': [], 'returns': [{'name': '', 'type': 'uint256'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': ['allPairs'], 'written': []}, 'src': '22#24'}"}
函数切片:
    function allPairsLength() external override view returns (uint) {
        return allPairs.length;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-pairCodeHash-2
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'pairCodeHash', 'visibility': 'external', 'stateMutability': 'pure', 'parameters': [], 'returns': [{'name': '', 'type': 'bytes32'}], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '26#28'}"}
函数切片:
    function pairCodeHash() external pure returns (bytes32) {
        return keccak256(type(UniswapV2Pair).creationCode);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-createPair-3
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'createPair', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': 'tokenA', 'type': 'address'}, {'name': 'tokenB', 'type': 'address'}], 'returns': [{'name': 'pair', 'type': 'address'}], 'permission_check': False, 'reentrancy_guard': False, 'events': ['PairCreated'], 'errors': ['UniswapV2: IDENTICAL_ADDRESSES', 'UniswapV2: ZERO_ADDRESS', 'UniswapV2: PAIR_EXISTS'], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': ['getPair', 'getPair', 'getPair', 'allPairs', 'allPairs'], 'written': []}, 'src': '30#45'}"}
函数切片:
    function createPair(address tokenA, address tokenB) external override returns (address pair) {
        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');
        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);
        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');
        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient
        bytes memory bytecode = type(UniswapV2Pair).creationCode;
        bytes32 salt = keccak256(abi.encodePacked(token0, token1));
        assembly {
            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)
        }
        UniswapV2Pair(pair).initialize(token0, token1);
        getPair[token0][token1] = pair;
        getPair[token1][token0] = pair; // populate mapping in the reverse direction
        allPairs.push(pair);
        emit PairCreated(token0, token1, pair, allPairs.length);
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-setFeeTo-4
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'setFeeTo', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_feeTo', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2: FORBIDDEN'], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': ['feeToSetter', 'feeTo'], 'written': []}, 'src': '47#50'}"}
函数切片:
    function setFeeTo(address _feeTo) external override {
        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
        feeTo = _feeTo;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-setMigrator-5
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'setMigrator', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_migrator', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2: FORBIDDEN'], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': ['feeToSetter', 'migrator'], 'written': []}, 'src': '52#55'}"}
函数切片:
    function setMigrator(address _migrator) external override {
        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
        migrator = _migrator;
    }
------------------------------------------------
函数切片ID: SushiSwap-UniswapV2Factory.sol-setFeeToSetter-6
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-UniswapV2Factory.sol', 'is_fault': False, 'message': "{'name': 'setFeeToSetter', 'visibility': 'external', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_feeToSetter', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': ['UniswapV2: FORBIDDEN'], 'contract': 'SushiSwap-UniswapV2Factory.sol', 'external_calls': [], 'state_vars': {'read': ['feeToSetter', 'feeToSetter'], 'written': []}, 'src': '57#60'}"}
函数切片:
    function setFeeToSetter(address _feeToSetter) external override {
        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');
        feeToSetter = _feeToSetter;
    }
------------------------------------------------
函数切片ID: SushiSwap-SushiSwapPairMock.sol-constructor-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiSwapPairMock.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiSwapPairMock.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '8#8'}"}
函数切片:
    constructor() public UniswapV2Pair() {}
------------------------------------------------
函数切片ID: SushiSwap-SushiSwapFactoryMock.sol-constructor-0
所属合约地址0xe11fc0b43ab98eb91e9836129d1ee7c3bc95df50
元数据:{'belong': 'SushiSwap-SushiSwapFactoryMock.sol', 'is_fault': False, 'message': "{'name': 'constructor', 'visibility': 'public', 'stateMutability': 'nonpayable', 'parameters': [{'name': '_feeToSetter', 'type': 'address'}], 'returns': [], 'permission_check': False, 'reentrancy_guard': False, 'events': [], 'errors': [], 'contract': 'SushiSwap-SushiSwapFactoryMock.sol', 'external_calls': [], 'state_vars': {'read': [], 'written': []}, 'src': '8#8'}"}
函数切片:
    constructor(address _feeToSetter) public UniswapV2Factory(_feeToSetter) {}
------------------------------------------------